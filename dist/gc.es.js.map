{"version":3,"file":"gc.es.js","sources":["../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-error.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-error.vue?vue&type=template&id=4e994755&lang.js","../../GitHub/serverapi/jsprocessor/node_modules/style-inject/dist/style-inject.es.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-input.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-input.vue?vue&type=template&id=862a7bf8&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-confirm.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-confirm.vue?vue&type=template&id=da09750c&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/client.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-select.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-select.vue?vue&type=template&id=2db2f132&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-radio.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-radio.vue?vue&type=template&id=1d57fdb5&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-checkbox.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-checkbox.vue?vue&type=template&id=20f6a60e&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-textarea.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-textarea.vue?vue&type=template&id=4a369620&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-asset.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form-asset.vue?vue&type=template&id=b4db5bac&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-progress-bar.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-progress-bar.vue?vue&type=template&id=76910936&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/error.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/dictionary.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-form.vue?vue&type=template&id=4f9e8c07&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-nav.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-nav.vue?vue&type=template&id=0ddb4230&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-filter-form-time.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-filter-form-time.vue?vue&type=template&id=79505a64&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-filter-form-checkbox.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-filter-form-checkbox.vue?vue&type=template&id=03c03e4c&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-widget-window.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-widget-window.vue?vue&type=template&id=73155766&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-filter-form.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-filter-form.vue?vue&type=template&id=6afc4706&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-pagination.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-pagination.vue?vue&type=template&id=33216f9d&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-selectfields.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-selectfields.vue?vue&type=template&id=28f36b10&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-repo-header.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-repo-header.vue?vue&type=template&id=c77c7256&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-tree-node.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-tree-node.vue?vue&type=template&id=cdc115c4&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/dragndrop.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-tree.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-tree.vue?vue&type=template&id=f3fc143e&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-table.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-table.vue?vue&type=template&id=772343ca&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-repo.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-repo.vue?vue&type=template&id=19e0d3b5&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/router.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-breadcrumbs.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-breadcrumbs.vue?vue&type=template&id=7f42065d&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-single-item.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-single-item.vue?vue&type=template&id=489b2705&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-accounthandler.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-accounthandler.vue?vue&type=template&id=b0295d00&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-tabs.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-tabs.vue?vue&type=template&id=0342747e&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/params.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/ctrltoroutemapper.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-account-details.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-account-details.vue?vue&type=template&id=52485caf&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-root.vue","../../GitHub/serverapi/jsprocessor/vite-sdk/src/components/gc-root.vue?vue&type=template&id=2970c125&lang.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/validator.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/field.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/states/modelstate.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/asset.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/states/modelcreate.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/states/modelupdate.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/states/modelgetprimary.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/states/modelget.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/states/modellogin.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/model.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/modelgroup.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/controller.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/ctrlmap.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/factorycontroller.js","../../GitHub/serverapi/jsprocessor/vite-sdk/src/js/settingsinjection.js","../../GitHub/serverapi/jsprocessor/import.js"],"sourcesContent":["<template>\r\n    <p class=\"error\">{{ error }}</p>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n    name : 'gc-error',\r\n    props : {\r\n        'error' : String\r\n    }\r\n});\r\n\r\n</script>\r\n\r\n<style>\r\n.error {\r\n  color : red;\r\n}\r\n</style>","<template>\r\n    <p class=\"error\">{{ error }}</p>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n    name : 'gc-error',\r\n    props : {\r\n        'error' : String\r\n    }\r\n});\r\n\r\n</script>\r\n\r\n<style>\r\n.error {\r\n  color : red;\r\n}\r\n</style>","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","<template>\r\n    <label v-if=\"field.atts.type != 'hidden'\">{{ field.label }}</label>\r\n    <input :name=\"field.name\" :type=\"field.atts.type\" v-model=\"val\" @blur=\"setValidateOn()\" :readonly=\"field.readonly\">\r\n    <gc-error v-show=\"showError\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-input',\r\n  props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n    <label v-if=\"field.atts.type != 'hidden'\">{{ field.label }}</label>\r\n    <input :name=\"field.name\" :type=\"field.atts.type\" v-model=\"val\" @blur=\"setValidateOn()\" :readonly=\"field.readonly\">\r\n    <gc-error v-show=\"showError\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-input',\r\n  props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n    <label>{{ field.label }}</label>\r\n    <input :name=\"name\" :type=\"field.atts.type\" v-model=\"cval\" @blur=\"setValidateOn()\">\r\n    <gc-error v-show=\"error\" :error=\"error\" />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-confirm',\r\n  props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  data() {\r\n      return {\r\n          cval : \"\"\r\n      }\r\n  },\r\n  computed : {\r\n    name() {\r\n        return this.field.name + \"_confirm\";\r\n    },\r\n    error() {\r\n        if (this.isvalidateon) {\r\n            if (this.val == this.cval) return \"\";\r\n            else return \"Doesn't match \" + this.field.name; \r\n        }      \r\n    }\r\n  },\r\n  watch : {\r\n      cval(value) {\r\n          if (this.error) {\r\n              this.$emit(\"confirmerror\", 1);\r\n          } else {\r\n              this.$emit(\"confirmerror\", -1);\r\n          }\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n    <label>{{ field.label }}</label>\r\n    <input :name=\"name\" :type=\"field.atts.type\" v-model=\"cval\" @blur=\"setValidateOn()\">\r\n    <gc-error v-show=\"error\" :error=\"error\" />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-confirm',\r\n  props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  data() {\r\n      return {\r\n          cval : \"\"\r\n      }\r\n  },\r\n  computed : {\r\n    name() {\r\n        return this.field.name + \"_confirm\";\r\n    },\r\n    error() {\r\n        if (this.isvalidateon) {\r\n            if (this.val == this.cval) return \"\";\r\n            else return \"Doesn't match \" + this.field.name; \r\n        }      \r\n    }\r\n  },\r\n  watch : {\r\n      cval(value) {\r\n          if (this.error) {\r\n              this.$emit(\"confirmerror\", 1);\r\n          } else {\r\n              this.$emit(\"confirmerror\", -1);\r\n          }\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","let custom_headers  = {};\r\nlet main_url;\r\nlet status_handlers = {};\r\nlet debug = true;\r\n\r\nexport default {\r\n\r\n    regCustomHeader(name, value) {\r\n        custom_headers[name] = value;\r\n    },\r\n\r\n    regStatusHandler(status, handler) {\r\n        status_handlers[status] = handler;\r\n    },\r\n\r\n    setURL(url) {\r\n        main_url = url;\r\n    },\r\n    regDebug(is_debug) {\r\n        debug = is_debug;\r\n    },\r\n\r\n    run(url, headers) {\r\n        \r\n        headers.mode = 'cors';\r\n        headers.cache = 'no-cache';\r\n        headers.credentials = 'include';\r\n        headers['Content-Type'] = 'application/json';\r\n        headers.headers = custom_headers;\r\n\r\n        const _self = this;\r\n\r\n        return fetch(main_url + url, headers)\r\n        .then(response => {\r\n            if (status_handlers[response.status]) {\r\n                status_handlers[response.status](response);\r\n            } else if (response.status == 401) {\r\n                return response.status;\r\n            } else if (response.ok) {\r\n                return response.json();\r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then(val => {\r\n            if (val == 401) {\r\n                let omethod = headers.method;\r\n                headers.method = 'PUT';\r\n                return fetch(main_url + \"/core-switch-tokens\", headers)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        headers.method = omethod;\r\n                        return fetch(main_url + url, headers)\r\n                        .then(response=> {\r\n                            if (response.status == 401) {\r\n                                throw new Error(\"Issue with refresh token\");\r\n                            } else if (response.ok) {\r\n                                return response.json();\r\n                            } else {\r\n                              //  profile.updateUser(\"public\", 0);\r\n                              //  throw Error(\"Logged out\");\r\n                            }\r\n                        });\r\n                    } else {\r\n                       // profile.updateUser(\"public\", 0);\r\n                       // throw Error(\"Logged out\");\r\n                    }\r\n                });\r\n            } else return val;\r\n        })\r\n        .catch(err => {\r\n            if (debug) console.log(err);\r\n            throw err;\r\n        });\r\n    }, \r\n    setDebug(data) {\r\n        if (!data) {\r\n            data = {\"__debug\" : true}\r\n        } else {\r\n            data[\"__debug\"] = true;\r\n        }\r\n        return data;\r\n    },\r\n    get(url, data) {\r\n        if (debug) data = this.setDebug(data);\r\n        if (data) {\r\n            const params = new URLSearchParams();\r\n            let graph = {};\r\n            for(let i in data) {\r\n                if (Array.isArray(data[i]) || (typeof data[i] == 'object' && data[i] !== null)) graph[i] = data[i];\r\n                else params.append(i, data[i]);\r\n            }\r\n\r\n            if (graph) {\r\n                params.append(\"graph\", JSON.stringify(graph));\r\n            }\r\n            if (url.indexOf(\"?\") == -1) url += \"?\";\r\n            else url += \"&\";\r\n            url += params.toString();\r\n        }\r\n        let headers = {};\r\n        headers.method = 'GET';\r\n        return  this.run(url, headers);\r\n    },\r\n\r\n    getprimary(url, data) {\r\n        return this.get(url, data);\r\n    },\r\n\r\n    post(url, data) {\r\n        //call our fetch response and return\r\n        if (debug) data = this.setDebug(data);\r\n        let headers = {};\r\n        headers.method = 'POST';\r\n        headers.body = JSON.stringify(data);\r\n        return this.run(url, headers);\r\n    },\r\n\r\n    put(url, data) {\r\n        if (debug) data = this.setDebug(data);\r\n        let headers = {};\r\n        headers.method = 'PUT';\r\n        headers.body = JSON.stringify(data);\r\n        return this.run(url, headers);\r\n    },\r\n\r\n    patch(url, data) {\r\n        if (debug) data = this.setDebug(data);\r\n        let headers = {};\r\n        headers.method = 'PATCH';\r\n        headers.body = JSON.stringify(data);\r\n        return this.run(url, headers);\r\n    },\r\n\r\n    delete(url, data) {\r\n        if (debug) data = this.setDebug(data);\r\n        let headers = {};\r\n        headers.method = 'DELETE';\r\n        headers.body = JSON.stringify(data);\r\n        return this.run(url, headers);\r\n    }\r\n}\r\n","<template>\r\n  <label>{{ field.label }}</label>\r\n  <select v-model=\"val\" :readonly=\"field.readonly\" :name=\"field.name\" :multiple=\"multiple\">\r\n    <option value=\"0\">Select Option</option>\r\n    <option v-for=\"option in options\" :key=\"option.key\" :value=\"option.key\">{{ option.value }}</option>\r\n  </select>\r\n  <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"vue\"\r\nimport GCError from \"./gc-error.vue\"\r\nimport Client from \"./../js/client.js\"\r\n\r\n\r\nexport default {\r\n   props : {\r\n    field : Object,\r\n    stores : Object,\r\n    multiple : Boolean\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>","<template>\r\n  <label>{{ field.label }}</label>\r\n  <select v-model=\"val\" :readonly=\"field.readonly\" :name=\"field.name\" :multiple=\"multiple\">\r\n    <option value=\"0\">Select Option</option>\r\n    <option v-for=\"option in options\" :key=\"option.key\" :value=\"option.key\">{{ option.value }}</option>\r\n  </select>\r\n  <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from \"vue\"\r\nimport GCError from \"./gc-error.vue\"\r\nimport Client from \"./../js/client.js\"\r\n\r\n\r\nexport default {\r\n   props : {\r\n    field : Object,\r\n    stores : Object,\r\n    multiple : Boolean\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>","<template>\r\n      <label>{{ field.label }}</label>\r\n        <div v-for=\"option in options\" :key=\"option\">\r\n            <label >{{ option.option }}</label>\r\n            <input :name=\"cfield.name\" type=\"radio\" :value=\"option.value\" v-model=\"val\">\r\n        </div>\r\n        <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-radio',\r\n  props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  data() {\r\n      return {\r\n          isvalidateon : false\r\n      }\r\n  },\r\n  methods : {\r\n      setValidateOn() {\r\n          this.isvalidateon = true;\r\n      },\r\n      validate() {\r\n          let data = this.stores.getData(this.field.name);\r\n          const err = this.field.validate(data);\r\n          this.stores.updateField(this.field.name, \"error\", err);\r\n      }\r\n  },\r\n  computed : {\r\n      val : {\r\n          get : function() {\r\n              return this.stores.getData(this.field.name);\r\n          },\r\n          set : function(val) {\r\n              this.stores.setData(this.field.name, val);\r\n              if (this.isvalidateon) this.validate();\r\n          }\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n\r\n\r\n","<template>\r\n      <label>{{ field.label }}</label>\r\n        <div v-for=\"option in options\" :key=\"option\">\r\n            <label >{{ option.option }}</label>\r\n            <input :name=\"cfield.name\" type=\"radio\" :value=\"option.value\" v-model=\"val\">\r\n        </div>\r\n        <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-radio',\r\n  props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  data() {\r\n      return {\r\n          isvalidateon : false\r\n      }\r\n  },\r\n  methods : {\r\n      setValidateOn() {\r\n          this.isvalidateon = true;\r\n      },\r\n      validate() {\r\n          let data = this.stores.getData(this.field.name);\r\n          const err = this.field.validate(data);\r\n          this.stores.updateField(this.field.name, \"error\", err);\r\n      }\r\n  },\r\n  computed : {\r\n      val : {\r\n          get : function() {\r\n              return this.stores.getData(this.field.name);\r\n          },\r\n          set : function(val) {\r\n              this.stores.setData(this.field.name, val);\r\n              if (this.isvalidateon) this.validate();\r\n          }\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n\r\n\r\n","<template>\r\n    <label>{{ field.label }}</label>\r\n    <input type=\"checkbox\" :name=\"field.name\" v-model=\"val\">\r\n    <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-checkbox',\r\n   props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n   setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  \r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n    <label>{{ field.label }}</label>\r\n    <input type=\"checkbox\" :name=\"field.name\" v-model=\"val\">\r\n    <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-checkbox',\r\n   props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n   setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  \r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n       <label>{{ field.label }}</label>\r\n       <textarea :name=\"field.name\" v-model=\"val\" :readonly=\"field.readonly\"></textarea>        \r\n       <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-textarea',\r\n  props : {\r\n    field : Object,\r\n    stores : {\r\n        type : Object,\r\n        required : true\r\n    }\r\n  },\r\n  setup() {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  methods : {\r\n      validate() {\r\n          let data = this.stores.getData(this.field.name);\r\n          const err = this.field.validate(data);\r\n          this.stores.updateField(this.field.name, \"error\", err);\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n       <label>{{ field.label }}</label>\r\n       <textarea :name=\"field.name\" v-model=\"val\" :readonly=\"field.readonly\"></textarea>        \r\n       <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-textarea',\r\n  props : {\r\n    field : Object,\r\n    stores : {\r\n        type : Object,\r\n        required : true\r\n    }\r\n  },\r\n  setup() {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  methods : {\r\n      validate() {\r\n          let data = this.stores.getData(this.field.name);\r\n          const err = this.field.validate(data);\r\n          this.stores.updateField(this.field.name, \"error\", err);\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>\r\n","<template>\r\n  <label>{{ field.label }}</label>\r\n  <input ref=\"input\" @change=\"setFile\" :name=\"field.name\" type=\"file\" >\r\n  <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-asset-field',\r\n  props : {\r\n    field : {\r\n        type : Object,\r\n        required : true\r\n    },\r\n    stores : {\r\n        type : Object,\r\n        required : true\r\n    }\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  methods : {\r\n      validate() {\r\n          let data = this.stores.data[this.field.name];\r\n          this.stores.fields[this.field_name].error = this.field.validate(data);\r\n      },\r\n      setFile(e) {\r\n          if (e.target.files.length > 0) {\r\n            this.val = e.target.files[0];\r\n          } else {\r\n            this.val = null;\r\n          }\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>","<template>\r\n  <label>{{ field.label }}</label>\r\n  <input ref=\"input\" @change=\"setFile\" :name=\"field.name\" type=\"file\" >\r\n  <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-asset-field',\r\n  props : {\r\n    field : {\r\n        type : Object,\r\n        required : true\r\n    },\r\n    stores : {\r\n        type : Object,\r\n        required : true\r\n    }\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  methods : {\r\n      validate() {\r\n          let data = this.stores.data[this.field.name];\r\n          this.stores.fields[this.field_name].error = this.field.validate(data);\r\n      },\r\n      setFile(e) {\r\n          if (e.target.files.length > 0) {\r\n            this.val = e.target.files[0];\r\n          } else {\r\n            this.val = null;\r\n          }\r\n      }\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n});\r\n</script>","<template>\r\n    <div>\r\n        <div class=\"gc-holder\">\r\n            <div class=\"gc-bar\" :style=\"style\">&nbsp;</div> \r\n        </div>   \r\n        <span>{{ num }}%</span>\r\n    </div> \r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: 'gc-progress-bar',\r\n  props : {\r\n      total : Number,\r\n      progress : Number\r\n  },\r\n  computed : {\r\n      num() {\r\n          let num = Math.floor((this.progress / this.total) * 100);\r\n          return (isNaN(num)) ? 0 : num;\r\n      },\r\n      style() {\r\n          return \"width:\" +  this.num + \"%;\";\r\n      }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n .gc-holder {\r\n     width : 100%;\r\n     min-height : 10px;\r\n     position : relative;\r\n     display : flex;\r\n     align-items: stretch;\r\n     padding : 2px;\r\n }\r\n\r\n .gc-bar {\r\n     width : 0;\r\n     height : 100%;\r\n     position : relative;\r\n     line-height : 100%;\r\n }\r\n\r\n\r\n</style>\r\n","<template>\r\n    <div>\r\n        <div class=\"gc-holder\">\r\n            <div class=\"gc-bar\" :style=\"style\">&nbsp;</div> \r\n        </div>   \r\n        <span>{{ num }}%</span>\r\n    </div> \r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: 'gc-progress-bar',\r\n  props : {\r\n      total : Number,\r\n      progress : Number\r\n  },\r\n  computed : {\r\n      num() {\r\n          let num = Math.floor((this.progress / this.total) * 100);\r\n          return (isNaN(num)) ? 0 : num;\r\n      },\r\n      style() {\r\n          return \"width:\" +  this.num + \"%;\";\r\n      }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n .gc-holder {\r\n     width : 100%;\r\n     min-height : 10px;\r\n     position : relative;\r\n     display : flex;\r\n     align-items: stretch;\r\n     padding : 2px;\r\n }\r\n\r\n .gc-bar {\r\n     width : 0;\r\n     height : 100%;\r\n     position : relative;\r\n     line-height : 100%;\r\n }\r\n\r\n\r\n</style>\r\n","const error_invalid_map = {\r\n            1 : \"too small\",\r\n            2 : \"too large\",\r\n            3 : \"contains incorrect characters\",\r\n            4 : \"doesn't contain required characters\",\r\n            5 : \"not unique\"\r\n}\r\n\r\nfunction getError(code) {\r\n    return error_invalid_map[code];\r\n}\r\n\r\nexport default {\r\n    getError\r\n}","const _dictionary = {};\r\nconst _templates = {};\r\n\r\nfunction setDictionary(dicts) {\r\n    _dictionary = dicts;\r\n}\r\n\r\nfunction setDictionaryTemplate(temp, entry){\r\n    _templates[key] = { \"regex\" : new RegExp(temp), \"entry\" : entry };\r\n}\r\n\r\n\r\nfunction createEntry(category, entry = {}) {\r\n    let obj = { label : '', options : {}, error : ''};\r\n    for(let i in _templates) {\r\n        if (key.regex.test(category)) {\r\n            obj = { ...obj, ..._templates[i].entry }\r\n        }\r\n    }\r\n    obj = { ...obj, ...entry };\r\n    _dictionary[category] = obj;\r\n}\r\n\r\n\r\nfunction getEntry(category) {\r\n    return _dictionary[category];\r\n}\r\n\r\nfunction get(category, key, def) {\r\n    if (!_dictionary[category]) return def;\r\n    else if (!_dictionary[category][key]) return def;\r\n    else return _dictionary[category][key];\r\n}\r\n\r\n\r\nfunction exportToView(name) {\r\n    function dict(key, def) {\r\n        return getEntry(key, def);\r\n    }\r\n\r\n    function setEntry(key, entry) {\r\n        let obj = createEntry(key);\r\n        obj = { ...obj, ...entry};\r\n    }\r\n\r\n    return {\r\n        dict,\r\n        setEntry\r\n    }\r\n}\r\n\r\nexport default {\r\n    setDictionary, \r\n    setDictionaryTemplate,\r\n    createEntry,\r\n    getEntry,\r\n    exportToView,\r\n    get\r\n}","<template>\r\n <div>\r\n <form @submit.prevent=\"submit\" v-show=\"fstate==0\" :class=\"store.classes\">\r\n     <h1>{{ dict(\"title\", store.title) }}</h1>\r\n     <div class=\"error\" v-show=\"globalerror\">{{ dict(\"globalerror\", store.globalerror) }}</div>\r\n      <div v-for=\"field in fields\" :key=\"field.name\" class=\"gc-form-row\">\r\n          <gc-select v-if=\"field.type=='select'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-radio v-else-if=\"field.type=='radio'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-checkbox v-else-if=\"field.type=='checkbox'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-textarea v-else-if=\"field.type=='textarea'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-asset-field v-else-if=\"field.type=='asset'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-input v-else :field=\"field\" :stores=\"store\" />\r\n          <div v-if=\"field.confirm\">\r\n            <gc-confirm :field=\"field\" :stores=\"store\"/> \r\n          </div>\r\n          <!-- REMOVED: -->\r\n      </div>\r\n      <input type=\"submit\" :value=\"dict('submit', 'Submit')\">\r\n\r\n  </form>\r\n  <gc-progress-bar v-show=\"fstate == 1\" :total=\"total\" :progress=\"progress\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCInput from \"./gc-form-input.vue\"\r\nimport GCConfirm from \"./gc-form-confirm.vue\"\r\nimport GCSelect from \"./gc-form-select.vue\"\r\nimport GCRadio from \"./gc-form-radio.vue\"\r\nimport GCCheckbox from \"./gc-form-checkbox.vue\"\r\nimport GCTextarea from \"./gc-form-textarea.vue\"\r\nimport GCAssetField from \"./gc-form-asset.vue\"\r\nimport GCProgressBar from \"./gc-progress-bar.vue\"\r\nimport Errors from \"../js/error.js\"\r\nimport Dictionary from \"./../js/dictionary.js\"\r\n\r\n\r\n \r\nexport default defineComponent({\r\n  name: 'gc-form',\r\n  props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      }\r\n  },\r\n  data() {\r\n      return {\r\n          fstate : 0,\r\n          progress : 0,\r\n          globalerror : ''\r\n      }\r\n  },\r\n  setup(props) {\r\n      let obj = props.store.exportToViewBlock();\r\n      return { ...obj, ...Dictionary.exportToView(props.store.model + \"-\" + props.store.action)}\r\n  },\r\n  methods : {\r\n    clearErrors() {\r\n        this.globalerror = \"\";\r\n        for(let i in this.store.fields) {\r\n            this.store.fields[i].error = 0;\r\n        }\r\n    },\r\n    submit(e) {\r\n        this.fstate = (this.total > 0) ? 1 : 2;\r\n        this.clearErrors();\r\n        this.store.submit()\r\n        .then(() => {\r\n            let promises = [];\r\n            for(let i in this.fields) {\r\n                if (this.fields[i].type == \"asset\") {\r\n                    let promise = this.store.saveAsset(this.fields[i])\r\n                    .then(() => {\r\n                        ++this.progress;\r\n                    })\r\n                    .catch(err => {\r\n                        this.fstate = 0;\r\n                        this.progress = 0;\r\n                        this.store.fields[i].error = err;\r\n                    });\r\n                    promises.push(promise);\r\n                }\r\n            }\r\n            return Promise.all(promises);\r\n        })\r\n        .then(() => {\r\n            this.store.runNext();\r\n        })\r\n        .catch(data => {\r\n            //show error fields, mark fields as invalidated\r\n            this.fstate = 0;\r\n            if (data.message) {\r\n                this.globalerror = data.message;\r\n            } else {\r\n                for(let i in data) {\r\n                    if (i.indexOf(\"__\") === 0) continue;\r\n                    else if (this.store.fields[i]) {\r\n                        this.store.fields[i].error = Errors.getError(data[i]);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n  },\r\n  computed : {\r\n      total() {\r\n          let total = 0;\r\n          for(let i in this.fields) {\r\n            if (this.fields[i].type == \"asset\") {\r\n                ++total;\r\n            }\r\n          }\r\n          return total;\r\n      }\r\n  },\r\n  components : \r\n    {\r\n      \"gc-input\" : GCInput,\r\n      \"gc-confirm\" : GCConfirm,\r\n      \"gc-select\" : GCSelect,\r\n      \"gc-radio\" : GCRadio,\r\n      \"gc-checkbox\" : GCCheckbox,\r\n      \"gc-textarea\": GCTextarea,\r\n      \"gc-asset-field\" : GCAssetField,\r\n      \"gc-progress-bar\" : GCProgressBar\r\n    }\r\n       \r\n  \r\n});\r\n</script>\r\n\r\n\r\n","<template>\r\n <div>\r\n <form @submit.prevent=\"submit\" v-show=\"fstate==0\" :class=\"store.classes\">\r\n     <h1>{{ dict(\"title\", store.title) }}</h1>\r\n     <div class=\"error\" v-show=\"globalerror\">{{ dict(\"globalerror\", store.globalerror) }}</div>\r\n      <div v-for=\"field in fields\" :key=\"field.name\" class=\"gc-form-row\">\r\n          <gc-select v-if=\"field.type=='select'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-radio v-else-if=\"field.type=='radio'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-checkbox v-else-if=\"field.type=='checkbox'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-textarea v-else-if=\"field.type=='textarea'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-asset-field v-else-if=\"field.type=='asset'\" :field=\"field\" :stores=\"store\" />\r\n          <gc-input v-else :field=\"field\" :stores=\"store\" />\r\n          <div v-if=\"field.confirm\">\r\n            <gc-confirm :field=\"field\" :stores=\"store\"/> \r\n          </div>\r\n          <!-- REMOVED: -->\r\n      </div>\r\n      <input type=\"submit\" :value=\"dict('submit', 'Submit')\">\r\n\r\n  </form>\r\n  <gc-progress-bar v-show=\"fstate == 1\" :total=\"total\" :progress=\"progress\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCInput from \"./gc-form-input.vue\"\r\nimport GCConfirm from \"./gc-form-confirm.vue\"\r\nimport GCSelect from \"./gc-form-select.vue\"\r\nimport GCRadio from \"./gc-form-radio.vue\"\r\nimport GCCheckbox from \"./gc-form-checkbox.vue\"\r\nimport GCTextarea from \"./gc-form-textarea.vue\"\r\nimport GCAssetField from \"./gc-form-asset.vue\"\r\nimport GCProgressBar from \"./gc-progress-bar.vue\"\r\nimport Errors from \"../js/error.js\"\r\nimport Dictionary from \"./../js/dictionary.js\"\r\n\r\n\r\n \r\nexport default defineComponent({\r\n  name: 'gc-form',\r\n  props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      }\r\n  },\r\n  data() {\r\n      return {\r\n          fstate : 0,\r\n          progress : 0,\r\n          globalerror : ''\r\n      }\r\n  },\r\n  setup(props) {\r\n      let obj = props.store.exportToViewBlock();\r\n      return { ...obj, ...Dictionary.exportToView(props.store.model + \"-\" + props.store.action)}\r\n  },\r\n  methods : {\r\n    clearErrors() {\r\n        this.globalerror = \"\";\r\n        for(let i in this.store.fields) {\r\n            this.store.fields[i].error = 0;\r\n        }\r\n    },\r\n    submit(e) {\r\n        this.fstate = (this.total > 0) ? 1 : 2;\r\n        this.clearErrors();\r\n        this.store.submit()\r\n        .then(() => {\r\n            let promises = [];\r\n            for(let i in this.fields) {\r\n                if (this.fields[i].type == \"asset\") {\r\n                    let promise = this.store.saveAsset(this.fields[i])\r\n                    .then(() => {\r\n                        ++this.progress;\r\n                    })\r\n                    .catch(err => {\r\n                        this.fstate = 0;\r\n                        this.progress = 0;\r\n                        this.store.fields[i].error = err;\r\n                    });\r\n                    promises.push(promise);\r\n                }\r\n            }\r\n            return Promise.all(promises);\r\n        })\r\n        .then(() => {\r\n            this.store.runNext();\r\n        })\r\n        .catch(data => {\r\n            //show error fields, mark fields as invalidated\r\n            this.fstate = 0;\r\n            if (data.message) {\r\n                this.globalerror = data.message;\r\n            } else {\r\n                for(let i in data) {\r\n                    if (i.indexOf(\"__\") === 0) continue;\r\n                    else if (this.store.fields[i]) {\r\n                        this.store.fields[i].error = Errors.getError(data[i]);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n  },\r\n  computed : {\r\n      total() {\r\n          let total = 0;\r\n          for(let i in this.fields) {\r\n            if (this.fields[i].type == \"asset\") {\r\n                ++total;\r\n            }\r\n          }\r\n          return total;\r\n      }\r\n  },\r\n  components : \r\n    {\r\n      \"gc-input\" : GCInput,\r\n      \"gc-confirm\" : GCConfirm,\r\n      \"gc-select\" : GCSelect,\r\n      \"gc-radio\" : GCRadio,\r\n      \"gc-checkbox\" : GCCheckbox,\r\n      \"gc-textarea\": GCTextarea,\r\n      \"gc-asset-field\" : GCAssetField,\r\n      \"gc-progress-bar\" : GCProgressBar\r\n    }\r\n       \r\n  \r\n});\r\n</script>\r\n\r\n\r\n","<template>\r\n  <span class=\"gc-nav\">\r\n  <a v-for=\"route in actions\" v-bind:key=\"route\" @click=\"setRoute(route.r);\">\r\n    {{ route.n }}\r\n  </a> \r\n  </span>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, inject } from 'vue'\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-nav',\r\n  props: {\r\n    actions : Array\r\n  },\r\n  setup(props) {\r\n      let ctrl = inject(\"ctrl\");\r\n      return {\r\n          ctrl\r\n      }\r\n  },\r\n  methods : {\r\n      setRoute(route) {\r\n          route(); //this applies the route\r\n          this.ctrl.runLink();\r\n      }\r\n  }   \r\n});\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>","<template>\r\n  <span class=\"gc-nav\">\r\n  <a v-for=\"route in actions\" v-bind:key=\"route\" @click=\"setRoute(route.r);\">\r\n    {{ route.n }}\r\n  </a> \r\n  </span>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, inject } from 'vue'\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-nav',\r\n  props: {\r\n    actions : Array\r\n  },\r\n  setup(props) {\r\n      let ctrl = inject(\"ctrl\");\r\n      return {\r\n          ctrl\r\n      }\r\n  },\r\n  methods : {\r\n      setRoute(route) {\r\n          route(); //this applies the route\r\n          this.ctrl.runLink();\r\n      }\r\n  }   \r\n});\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>","<template>\r\n  <label>{{ dict(\"label\", field.label) }}</label>\r\n  <input type=\"date\" v-model=\"val1\">\r\n  <input type=\"date\" v-model=\"val2\">\r\n  <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default {\r\n  name: 'gc-time-range',\r\n props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>","<template>\r\n  <label>{{ dict(\"label\", field.label) }}</label>\r\n  <input type=\"date\" v-model=\"val1\">\r\n  <input type=\"date\" v-model=\"val2\">\r\n  <gc-error v-show=\"field.error\" :error=\"field.error\" />\r\n</template>\r\n\r\n<script>\r\nimport GCError from \"./gc-error.vue\"\r\n\r\nexport default {\r\n  name: 'gc-time-range',\r\n props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n  components : {\r\n      'gc-error' : GCError\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n</style>","<template>\r\n    <label>{{ field.label }}</label>\r\n    <select :name=\"field.name\" v-model=\"val\">\r\n        <option value=''>{{ dict(\"all\", \"All\") }}</option>\r\n        <option value='1'>{{ dict(\"checked\", \"Checked\") }}</option>\r\n        <option value='0'>{{ dict(\"unchecked\", \"Unchecked\") }}</option>\r\n    </select>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-checkbox',\r\n   props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n\r\n});\r\n</script>\r\n","<template>\r\n    <label>{{ field.label }}</label>\r\n    <select :name=\"field.name\" v-model=\"val\">\r\n        <option value=''>{{ dict(\"all\", \"All\") }}</option>\r\n        <option value='1'>{{ dict(\"checked\", \"Checked\") }}</option>\r\n        <option value='0'>{{ dict(\"unchecked\", \"Unchecked\") }}</option>\r\n    </select>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'gc-checkbox',\r\n   props : {\r\n    field : Object,\r\n    stores : Object\r\n  },\r\n  setup(props) {\r\n      return props.stores.exportToViewField(props.field);\r\n  },\r\n\r\n});\r\n</script>\r\n","<template>\r\n    <div>\r\n        <div class=\"gc-widget-window-header\">\r\n            {{ title }}\r\n            <a class=\"gc-widget-window-toggle-view\" @click=\"toggleWidget\"><span class=\"material-icons\">more_horiz</span></a>\r\n        </div>\r\n        <div class=\"gc-widget-window-body\" v-show=\"show\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent  } from 'vue'\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        title : String,\r\n        active : {\r\n            type : Boolean,\r\n            default : false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            show : this.active\r\n        }\r\n    },\r\n    methods : {\r\n        toggleWidget() {\r\n            this.show = (this.show) ? false : true;\r\n        }\r\n    }\r\n});\r\n\r\n</script>","<template>\r\n    <div>\r\n        <div class=\"gc-widget-window-header\">\r\n            {{ title }}\r\n            <a class=\"gc-widget-window-toggle-view\" @click=\"toggleWidget\"><span class=\"material-icons\">more_horiz</span></a>\r\n        </div>\r\n        <div class=\"gc-widget-window-body\" v-show=\"show\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent  } from 'vue'\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        title : String,\r\n        active : {\r\n            type : Boolean,\r\n            default : false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            show : this.active\r\n        }\r\n    },\r\n    methods : {\r\n        toggleWidget() {\r\n            this.show = (this.show) ? false : true;\r\n        }\r\n    }\r\n});\r\n\r\n</script>","<template>\r\n <gc-widget title=\"search\">\r\n   <form @submit.prevent=\"submit\" class=\"gc-filter-form\">\r\n      <h1>Search {{ store.title }}</h1>\r\n      <div v-for=\"field in store.fields\" :key=\"field.name\">\r\n          <gc-select v-if=\"field.type=='select'\" :field=\"field\" :multiple=\"true\"  :stores=\"store\"/>\r\n          <gc-filter-checkbox v-else-if=\"field.type=='checkbox'\" :field=\"field\"  :stores=\"store\"/>\r\n          <gc-time-range v-if=\"field.type=='time'\" :field=\"field\"  :stores=\"store\"/>\r\n          <gc-input v-else :field=\"field\" :stores=\"store\" />\r\n               \r\n          <!-- REMOVED: -->\r\n      </div>\r\n      <input type=\"submit\" value=\"Submit\">\r\n  </form>\r\n </gc-widget>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCInput from \"./gc-form-input.vue\"\r\nimport GCFormSelect from \"./gc-form-select.vue\"\r\nimport GCCheckbox from \"./gc-form-checkbox.vue\"\r\nimport GCFilterFormTime from \"./gc-filter-form-time.vue\"\r\nimport GCFilterFormCheckbox from \"./gc-filter-form-checkbox.vue\"\r\nimport GCWidget from \"./gc-widget-window.vue\"\r\n\r\n\r\n \r\nexport default defineComponent({\r\n  name: 'gc-filter-form',\r\n  props : {\r\n      store :  {\r\n          type : Object,\r\n          required : true\r\n      }\r\n  },\r\n   setup(props) {\r\n      return props.store.exportToViewBlock();\r\n  },\r\n  methods : {\r\n    submit() {\r\n      this.store.submit();\r\n    }\r\n  },\r\n  components : \r\n    {\r\n      \"gc-input\" : GCInput,\r\n      \"gc-select\" : GCFormSelect,\r\n      \"gc-checkbox\" : GCCheckbox,\r\n      \"gc-time-range\" : GCFilterFormTime,\r\n      \"gc-filter-checkbox\" : GCFilterFormCheckbox,\r\n      \"gc-widget\" : GCWidget\r\n    }\r\n       \r\n  \r\n});\r\n</script>\r\n<style scoped>\r\n.error {\r\n  color : red;\r\n}\r\n\r\n</style>\r\n\r\n","<template>\r\n <gc-widget title=\"search\">\r\n   <form @submit.prevent=\"submit\" class=\"gc-filter-form\">\r\n      <h1>Search {{ store.title }}</h1>\r\n      <div v-for=\"field in store.fields\" :key=\"field.name\">\r\n          <gc-select v-if=\"field.type=='select'\" :field=\"field\" :multiple=\"true\"  :stores=\"store\"/>\r\n          <gc-filter-checkbox v-else-if=\"field.type=='checkbox'\" :field=\"field\"  :stores=\"store\"/>\r\n          <gc-time-range v-if=\"field.type=='time'\" :field=\"field\"  :stores=\"store\"/>\r\n          <gc-input v-else :field=\"field\" :stores=\"store\" />\r\n               \r\n          <!-- REMOVED: -->\r\n      </div>\r\n      <input type=\"submit\" value=\"Submit\">\r\n  </form>\r\n </gc-widget>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCInput from \"./gc-form-input.vue\"\r\nimport GCFormSelect from \"./gc-form-select.vue\"\r\nimport GCCheckbox from \"./gc-form-checkbox.vue\"\r\nimport GCFilterFormTime from \"./gc-filter-form-time.vue\"\r\nimport GCFilterFormCheckbox from \"./gc-filter-form-checkbox.vue\"\r\nimport GCWidget from \"./gc-widget-window.vue\"\r\n\r\n\r\n \r\nexport default defineComponent({\r\n  name: 'gc-filter-form',\r\n  props : {\r\n      store :  {\r\n          type : Object,\r\n          required : true\r\n      }\r\n  },\r\n   setup(props) {\r\n      return props.store.exportToViewBlock();\r\n  },\r\n  methods : {\r\n    submit() {\r\n      this.store.submit();\r\n    }\r\n  },\r\n  components : \r\n    {\r\n      \"gc-input\" : GCInput,\r\n      \"gc-select\" : GCFormSelect,\r\n      \"gc-checkbox\" : GCCheckbox,\r\n      \"gc-time-range\" : GCFilterFormTime,\r\n      \"gc-filter-checkbox\" : GCFilterFormCheckbox,\r\n      \"gc-widget\" : GCWidget\r\n    }\r\n       \r\n  \r\n});\r\n</script>\r\n<style scoped>\r\n.error {\r\n  color : red;\r\n}\r\n\r\n</style>\r\n\r\n","<template>\r\n <div class=\"gc-pagination\">\r\n     <a v-show=\"optiongroup > 0\" @click=\"showPages(-1);\">&lt;&lt;</a>\r\n     <a v-for=\"index in maxoptions\" :key=\"index\" @click=\"page(index)\">{{ firstindex + index }}</a>\r\n     <a v-show=\"current_group < groups - 1\" @click=\"showPages(1)\">&gt;&gt;</a>\r\n </div>\r\n</template>\r\n<script>\r\nimport { defineComponent } from 'vue'\r\n\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        max_page_limit : Number\r\n    },\r\n    setup(props) {\r\n        let groups = Math.ceil(props.pages / props.max_page_limit);\r\n        return {\r\n            groups, current_group : 0\r\n        }\r\n    },\r\n    computed : {\r\n        firstindex() {\r\n            return this.current_group * this.max_options;\r\n        },\r\n        maxoptions() {\r\n            return [];\r\n        }\r\n    },\r\n    methods : {\r\n        showPages(index) {\r\n            let route = Controller.current_route.value;\r\n            let url = route + \"#\";\r\n            if (route.query) url += route.query + \"&\";\r\n            url += \"__page=\" + (this.firstindex + index);\r\n            Router.setRoute(url);\r\n        }\r\n    }\r\n});\r\n</script>","<template>\r\n <div class=\"gc-pagination\">\r\n     <a v-show=\"optiongroup > 0\" @click=\"showPages(-1);\">&lt;&lt;</a>\r\n     <a v-for=\"index in maxoptions\" :key=\"index\" @click=\"page(index)\">{{ firstindex + index }}</a>\r\n     <a v-show=\"current_group < groups - 1\" @click=\"showPages(1)\">&gt;&gt;</a>\r\n </div>\r\n</template>\r\n<script>\r\nimport { defineComponent } from 'vue'\r\n\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        max_page_limit : Number\r\n    },\r\n    setup(props) {\r\n        let groups = Math.ceil(props.pages / props.max_page_limit);\r\n        return {\r\n            groups, current_group : 0\r\n        }\r\n    },\r\n    computed : {\r\n        firstindex() {\r\n            return this.current_group * this.max_options;\r\n        },\r\n        maxoptions() {\r\n            return [];\r\n        }\r\n    },\r\n    methods : {\r\n        showPages(index) {\r\n            let route = Controller.current_route.value;\r\n            let url = route + \"#\";\r\n            if (route.query) url += route.query + \"&\";\r\n            url += \"__page=\" + (this.firstindex + index);\r\n            Router.setRoute(url);\r\n        }\r\n    }\r\n});\r\n</script>","<template>\r\n    <gc-widget :title=\"dict('button', 'select fields')\">\r\n        <div v-for=\"field in store.selectfields\" :key=\"field\"> \r\n            <input type=\"checkbox\" @click=\"toggle(field)\" :value=\"field\" :checked=\"store.selectedfields.includes(field)\"> {{ field }}\r\n        </div>\r\n        <button @click.stop=\"update\">{{ dict(\"update\", \"select\") }}</button>\r\n    </gc-widget>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport Dictionary from \"./../js/dictionary.js\"\r\nimport GCWidget from \"./gc-widget-window.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        store : {\r\n            type : Object,\r\n            required : true\r\n        }\r\n    },\r\n    setup(props) {\r\n        Dictionary.createEntry(\"gc-selectfields\", {\r\n            \"button\" : \"Select Fields\",\r\n            \"update\" : \"Update\"\r\n        });\r\n    },\r\n    methods : {\r\n        dict(key, def) {\r\n            return Dictionary.get(\"gc-selectfields\", key, def);\r\n        },\r\n        update() {\r\n            this.store.load();\r\n        },\r\n        toggle(name) {\r\n            let pos = this.store.selectedfields.indexOf(name);\r\n            if (pos > -1) {\r\n                this.store.selectedfields.splice(pos, 1);\r\n            } else {\r\n                this.store.selectedfields.push(name);\r\n            }\r\n        }\r\n    },\r\n    components : {\r\n        \"gc-widget\" : GCWidget\r\n    }\r\n});\r\n</script>\r\n\r\n","<template>\r\n    <gc-widget :title=\"dict('button', 'select fields')\">\r\n        <div v-for=\"field in store.selectfields\" :key=\"field\"> \r\n            <input type=\"checkbox\" @click=\"toggle(field)\" :value=\"field\" :checked=\"store.selectedfields.includes(field)\"> {{ field }}\r\n        </div>\r\n        <button @click.stop=\"update\">{{ dict(\"update\", \"select\") }}</button>\r\n    </gc-widget>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport Dictionary from \"./../js/dictionary.js\"\r\nimport GCWidget from \"./gc-widget-window.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        store : {\r\n            type : Object,\r\n            required : true\r\n        }\r\n    },\r\n    setup(props) {\r\n        Dictionary.createEntry(\"gc-selectfields\", {\r\n            \"button\" : \"Select Fields\",\r\n            \"update\" : \"Update\"\r\n        });\r\n    },\r\n    methods : {\r\n        dict(key, def) {\r\n            return Dictionary.get(\"gc-selectfields\", key, def);\r\n        },\r\n        update() {\r\n            this.store.load();\r\n        },\r\n        toggle(name) {\r\n            let pos = this.store.selectedfields.indexOf(name);\r\n            if (pos > -1) {\r\n                this.store.selectedfields.splice(pos, 1);\r\n            } else {\r\n                this.store.selectedfields.push(name);\r\n            }\r\n        }\r\n    },\r\n    components : {\r\n        \"gc-widget\" : GCWidget\r\n    }\r\n});\r\n</script>\r\n\r\n","<template>\r\n    <h1>{{ store.title }}</h1>\r\n    <span class=\"gc-nav\" v-if=\"store.actions.post\">\r\n            <a @click=\"setRoute(store.actions.post.r);\">{{ store.actions.post.n }}</a>\r\n    </span>\r\n    <gc-filter-form :store=\"store\" />\r\n    <gc-selectfields :store=\"store\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCFilterForm from \"./gc-filter-form.vue\"\r\nimport GCPagination from \"./gc-pagination.vue\"\r\nimport GCSelectFields from \"./gc-selectfields.vue\"\r\n\r\n\r\nexport default {\r\n  name: 'gc-header',\r\n  props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      }\r\n  },\r\n  setup(props) {\r\n      return props.store.exportToViewBlock();\r\n  },\r\n  methods : {\r\n    updateFields(e) {\r\n            this.store.load();\r\n        }\r\n   },\r\n    components : {\r\n        \"gc-nav\" : GCNav,\r\n        \"gc-filter-form\" : GCFilterForm,\r\n        \"gc-pagination\" : GCPagination,\r\n        \"gc-selectfields\" : GCSelectFields\r\n    }\r\n\r\n   \r\n}\r\n</script>\r\n","<template>\r\n    <h1>{{ store.title }}</h1>\r\n    <span class=\"gc-nav\" v-if=\"store.actions.post\">\r\n            <a @click=\"setRoute(store.actions.post.r);\">{{ store.actions.post.n }}</a>\r\n    </span>\r\n    <gc-filter-form :store=\"store\" />\r\n    <gc-selectfields :store=\"store\" />\r\n</template>\r\n\r\n<script>\r\n\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCFilterForm from \"./gc-filter-form.vue\"\r\nimport GCPagination from \"./gc-pagination.vue\"\r\nimport GCSelectFields from \"./gc-selectfields.vue\"\r\n\r\n\r\nexport default {\r\n  name: 'gc-header',\r\n  props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      }\r\n  },\r\n  setup(props) {\r\n      return props.store.exportToViewBlock();\r\n  },\r\n  methods : {\r\n    updateFields(e) {\r\n            this.store.load();\r\n        }\r\n   },\r\n    components : {\r\n        \"gc-nav\" : GCNav,\r\n        \"gc-filter-form\" : GCFilterForm,\r\n        \"gc-pagination\" : GCPagination,\r\n        \"gc-selectfields\" : GCSelectFields\r\n    }\r\n\r\n   \r\n}\r\n</script>\r\n","<template >\r\n    <div class='gc-draggable' :id=\"branch[store.primarykey]\" draggable=\"false\">\r\n        <div class=\"gc-data-row\" @click=\"selectRow(branch[store.primarykey]);\">  \r\n            <div>\r\n                <a v-if=\"ischild\" data-action=\"more\" class=\"button\" @click.prevent.stop=\"toggle(branch[store.primarykey], false)\">\r\n                    <span class=\"material-icons\">subdirectory_arrow_right</span>\r\n                </a>\r\n                <a v-else data-action=\"more\" class=\"button\" @click.prevent.stop=\"toggle(branch[store.primarykey], true)\">\r\n                    <span class=\"material-icons\">keyboard_arrow_right</span>\r\n                </a>\r\n            </div>\r\n            <div v-if=\"sortable\">\r\n                <a data-action=\"more\" class=\"button\" @click=\"prevent.stop\" @mousedown=\"setDraggable\" @mouseup=\"endDraggable\">\r\n                    <span class=\"material-icons\">drag_handle</span>\r\n                </a>\r\n            </div>\r\n            <div v-for=\"(field, cindex) in fields\" :key=\"cindex\">\r\n                <span>{{ branch[field.name] }}</span>\r\n            </div>\r\n            \r\n        </div>\r\n        <gc-tree-node v-for=\"(obj, index) in children\" :branch=\"obj\" :ischild=\"true\"  :key=\"index\" v-show=\"toggle_state[branch[store.primarykey]]\" :store=\"store\" />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n\tname : \"gc-tree-node\",\r\n\tprops : {\r\n\t\tbranch : {\r\n            type : Object,\r\n            required : true\r\n        },\r\n        draggable : Boolean,\r\n        store : {\r\n            type : Object,\r\n            required : true\r\n        },\r\n        ischild : {\r\n            type : Boolean,\r\n            default : false\r\n        }\r\n\r\n\t},\r\n    data() {\r\n        return {\r\n            toggle_state : {}\r\n        }\r\n    },\r\n    setup(props) {\r\n        return props.store.exportToViewBlock();\r\n    },\r\n\tmethods : {\r\n        toggle(index) {\r\n            this.toggle_state[index] = (this.toggle_state[index]) ? false : true;\r\n        },\r\n        setDraggable(e) {\r\n            e.target.closest(\".gc-draggable\").setAttribute(\"draggable\", true);\r\n        },\r\n        endDraggable(e) {\r\n            e.target.closest(\".gc-draggable\").setAttribute(\"draggable\", false);\r\n        },\r\n        selectRow(key) {\r\n            this.store.next(key);\r\n        }\r\n\t},\r\n    computed : {\r\n        sortable() {\r\n            return true;\r\n        },\r\n        children() {\r\n            let arr = [];\r\n            if (this.store.circular && this.branch[this.store.model]) arr = this.branch[this.store.model];\r\n            for(let i in this.store.activechildren) {\r\n                if (this.branch[this.store.activechildren[i]]) arr=arr.concat(this.branch[this.store.activechildren[i]]);\r\n            }\r\n            return arr;\r\n        }\r\n    },\r\n\tcomponents : {\r\n\t\r\n\t}\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.model-tree.branch {\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n  margin: 6px 0;\r\n  background-color:#111111;\r\n}\r\n\r\n.tree .ide-block {\r\n\tdisplay : none;\r\n}\r\n\r\n.dragArea {\r\n  min-height: 50px;\r\n  outline: 1px solid #777777;\r\n}\r\n\r\n\r\n</style>","<template >\r\n    <div class='gc-draggable' :id=\"branch[store.primarykey]\" draggable=\"false\">\r\n        <div class=\"gc-data-row\" @click=\"selectRow(branch[store.primarykey]);\">  \r\n            <div>\r\n                <a v-if=\"ischild\" data-action=\"more\" class=\"button\" @click.prevent.stop=\"toggle(branch[store.primarykey], false)\">\r\n                    <span class=\"material-icons\">subdirectory_arrow_right</span>\r\n                </a>\r\n                <a v-else data-action=\"more\" class=\"button\" @click.prevent.stop=\"toggle(branch[store.primarykey], true)\">\r\n                    <span class=\"material-icons\">keyboard_arrow_right</span>\r\n                </a>\r\n            </div>\r\n            <div v-if=\"sortable\">\r\n                <a data-action=\"more\" class=\"button\" @click=\"prevent.stop\" @mousedown=\"setDraggable\" @mouseup=\"endDraggable\">\r\n                    <span class=\"material-icons\">drag_handle</span>\r\n                </a>\r\n            </div>\r\n            <div v-for=\"(field, cindex) in fields\" :key=\"cindex\">\r\n                <span>{{ branch[field.name] }}</span>\r\n            </div>\r\n            \r\n        </div>\r\n        <gc-tree-node v-for=\"(obj, index) in children\" :branch=\"obj\" :ischild=\"true\"  :key=\"index\" v-show=\"toggle_state[branch[store.primarykey]]\" :store=\"store\" />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n\tname : \"gc-tree-node\",\r\n\tprops : {\r\n\t\tbranch : {\r\n            type : Object,\r\n            required : true\r\n        },\r\n        draggable : Boolean,\r\n        store : {\r\n            type : Object,\r\n            required : true\r\n        },\r\n        ischild : {\r\n            type : Boolean,\r\n            default : false\r\n        }\r\n\r\n\t},\r\n    data() {\r\n        return {\r\n            toggle_state : {}\r\n        }\r\n    },\r\n    setup(props) {\r\n        return props.store.exportToViewBlock();\r\n    },\r\n\tmethods : {\r\n        toggle(index) {\r\n            this.toggle_state[index] = (this.toggle_state[index]) ? false : true;\r\n        },\r\n        setDraggable(e) {\r\n            e.target.closest(\".gc-draggable\").setAttribute(\"draggable\", true);\r\n        },\r\n        endDraggable(e) {\r\n            e.target.closest(\".gc-draggable\").setAttribute(\"draggable\", false);\r\n        },\r\n        selectRow(key) {\r\n            this.store.next(key);\r\n        }\r\n\t},\r\n    computed : {\r\n        sortable() {\r\n            return true;\r\n        },\r\n        children() {\r\n            let arr = [];\r\n            if (this.store.circular && this.branch[this.store.model]) arr = this.branch[this.store.model];\r\n            for(let i in this.store.activechildren) {\r\n                if (this.branch[this.store.activechildren[i]]) arr=arr.concat(this.branch[this.store.activechildren[i]]);\r\n            }\r\n            return arr;\r\n        }\r\n    },\r\n\tcomponents : {\r\n\t\r\n\t}\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.model-tree.branch {\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n  margin: 6px 0;\r\n  background-color:#111111;\r\n}\r\n\r\n.tree .ide-block {\r\n\tdisplay : none;\r\n}\r\n\r\n.dragArea {\r\n  min-height: 50px;\r\n  outline: 1px solid #777777;\r\n}\r\n\r\n\r\n</style>","class GCDragNDrop {\r\n\r\n    constructor(props = {}) {\r\n        this._handle = props.handle;\r\n        this._drop_target = props.drop_target;\r\n        this._drag_target = props.drag_target;\r\n        this._call_back = props.callback;\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._offset_x = 0;\r\n        this._offset_y = 0;\r\n        this._judder = (props.judder) ? props.judder : 5;\r\n        this._drag_node;\r\n        this._drop_node;\r\n        this._tree = props.tree;\r\n    }\r\n\r\n    isJudder(x, y) {\r\n        const dx = x - this._x;\r\n        const dy = y - this._y;\r\n      \r\n        if (dx < -5 || dx > 5) return false;\r\n        else if (dy < -5 || dy > 5) return false;\r\n        else return true;\r\n    }\r\n\r\n    getDirection(x, y) {\r\n        const dir_x = (x == this._x) ? 0 : (x > this._x) ? 1 : -1;\r\n        const dir_y = (y == this._y) ? 0 : (y > this._y) ? 1 : -1;\r\n      \r\n        return { x : dir_x, y : dir_y };\r\n    }\r\n\r\n    offset(elem) {\r\n        var rect = elem.getBoundingClientRect();\r\n        var win = elem.ownerDocument.defaultView;\r\n\r\n        return {\r\n            top: rect.top + win.pageYOffset,\r\n            left: rect.left + win.pageXOffset\r\n        };\r\n    }\r\n\r\n    insertAfter() {\r\n        let drag_id = this._drag_node.getAttribute(\"id\");\r\n        let drop_id = this._drop_node.getAttribute(\"id\");\r\n\r\n        let circular = 0;\r\n        let sort = 0;\r\n        if (this._drop_node.nextElementSibling) {\r\n            for(let i in this._tree) {\r\n                let node = this._tree[i];\r\n                if (node.id == drop_id) {\r\n                    circular = node.circular;\r\n                    sort = node.sort;\r\n                    break;\r\n                } \r\n            }\r\n\r\n            for(let i in this._tree) {\r\n                let node = this._tree[i];\r\n                if (node.id == drag_id) {\r\n                    node.circular = circular;\r\n                    node.sort = sort + 1;\r\n                } else if (node.circular == circular && node.sort > sort) {\r\n                    ++node.sort;\r\n                }\r\n            }\r\n        } else {\r\n            for(let i in this._tree) {\r\n                let node = this._tree[i];\r\n                if (node.id == drag_id) {\r\n                    node.circular = circular;\r\n                    node.sort = 0;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    insertBefore() {\r\n        let drag_id = this._drag_node.getAttribute(\"id\");\r\n        let drop_id = this._drop_node.getAttribute(\"id\");\r\n\r\n        let circular = 0;\r\n        let sort = 0;\r\n        for(let i in this._tree) {\r\n            let node = this._tree[i];\r\n            if (node.id == drop_id) {\r\n                circular = node.circular;\r\n                sort = node.sort;\r\n                ++node.sort;\r\n                break;\r\n            } \r\n        }\r\n\r\n        for(let i in this._tree) {\r\n            let node = this._tree[i];\r\n            if (node.id == drag_id) {\r\n                node.circular = circular;\r\n                node.sort = sort;\r\n            } else if (node.circular == circular && node.sort > sort) {\r\n                ++node.sort;\r\n            }\r\n        }\r\n    }\r\n\r\n    dragStart(ev) {\r\n        const targ = ev.target.closest('[id]');\r\n        this._drag_node = targ;\r\n        const { top, left } = this.offset(targ);\r\n\r\n        ev.dataTransfer.dropEffect = \"move\";\r\n\r\n        this._x = ev.clientX;\r\n        this._y = ev.clientY;\r\n    \r\n        this._offset_x = ev.clientX - left;\r\n        this._offset_y = ev.clientY - top;\r\n    }\r\n\r\n    isDroppable(ev) {\r\n        let cont = ev.target.closest(this._drop_target);\r\n        return (cont) ? true : false;\r\n    }\r\n\r\n    dragEnter(ev) {\r\n        if (!this.isDroppable(ev)) return true;\r\n        ev.preventDefault();\r\n        ev.dataTransfer.dropEffect = \"move\";\r\n\r\n        this._drop_node = ev.target.closest(this._drag_target);\r\n\r\n        if (!this._drop_node || this._drop_node.getAttribute(\"id\") == this._drag_node.getAttribute(\"id\")) {\r\n            return;\r\n        }\r\n\r\n        const dir = this.getDirection(ev.clientX, ev.clientY);\r\n\r\n        if (dir.y == 1) {\r\n            this.insertAfter();\r\n        } else if (dir.y == -1) {\r\n            this.insertBefore();\r\n        }\r\n        this._x = ev.clientX;\r\n        this._y = ev.clientY;\r\n    }\r\n\r\n    dragOver(ev) {\r\n        if (!this.isDroppable(ev)) return true;\r\n        ev.preventDefault();\r\n        ev.dataTransfer.dropEffect = \"move\";\r\n    }\r\n\r\n\r\n    dragEnd() {\r\n        if (this._drag_node) this._drag_node.setAttribute(\"draggable\", false);\r\n        this._drag_node = null;\r\n    }\r\n\r\n    drop(ev) {\r\n        if (!this._drop_node) return true;\r\n        ev.preventDefault();\r\n        if (this._call_back) this._call_back(this._tree);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction initDD(props) {\r\n    let drag = new GCDragNDrop(props);\r\n    let handles = document.querySelectorAll(props.handle);\r\n    handles.forEach(el => el.addAttribute(\"draggable\", true));\r\n\r\n    if (props.handle) {\r\n\r\n        let handles = document.querySelectorAll(props.handle);\r\n\r\n        handles.forEach(el => {\r\n            el.addEventListener(\"mousedown\", e => {\r\n                let cont = e.target.closest(props.drag_target);\r\n                cont.addAttribute(\"draggable\", true);\r\n            });            \r\n        });\r\n    }\r\n\r\n    props.main.addEventListener(\"dragstart\", e => drag.dragStart(e));\r\n    props.main.addEventListener(\"dragenter\", e => drag.dragEnter(e));\r\n    props.main.addEventListener(\"dragover\", e => drag.dragOver(e));\r\n    props.main.addEventListener(\"drop\", e => drag.drop(e));\r\n    props.main.addEventListener(\"dragend\", e => drag.dragEnd(e));\r\n}\r\n\r\nexport default {\r\n    initDD\r\n}","<template >\r\n  <div :class=\"store.classes\">\r\n    <div class=\"gc-data-header\">\r\n        <div>&nbsp;</div>\r\n        <div v-for=\"cell in fields\" :key=\"cell.name\" :class=\"cell.name\">{{ cell.label }}</div>\r\n        <div v-if=\"store.sort\">&nbsp;</div>\r\n    </div>\r\n    <div class=\"gc-tree gc-drop-target\" ref=\"treeroot\">\r\n        <gc-tree-node v-for=\"(obj, index) in store.data\" :key=\"index\" :branch=\"obj\" :store=\"store\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue'\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCTreeNode from \"./gc-tree-node.vue\"\r\nimport GCDragDrop from \"./../js/dragndrop.js\"\r\nimport GCFilterForm from \"./gc-filter-form.vue\"\r\nimport GCSelectFields from \"./gc-selectfields.vue\"\r\n\r\n\r\nexport default {\r\n\tname : \"gc-tree\",\r\n    props : {\r\n        store : {\r\n            type : Object,\r\n            required : true\r\n        }\r\n    },\r\n    setup(props) {\r\n       const treeroot = ref(null);\r\n        let base = props.store.exportToViewBlock();\r\n        onMounted(() => {\r\n           //if (ctrl.sort) {\r\n             GCDragDrop.initDD({\r\n               handle : '.gc-drag-handle',\r\n               drag_target : '.gc-draggable',\r\n               drop_target : '.gc-drop-target',\r\n               main : treeroot.value,\r\n               tree : props.store.data,\r\n               callback : props.store.saveSort\r\n             });\r\n           //}\r\n        });\r\n\r\n       return { ...base, treeroot};\r\n   },\r\n    components : {\r\n        \"gc-nav\" : GCNav,\r\n        \"gc-tree-node\" : GCTreeNode,\r\n        \"gc-filter-form\" : GCFilterForm,\r\n        \"gc-selectfields\" : GCSelectFields\r\n    }\r\n}\r\n\r\n\r\n</script>\r\n","<template >\r\n  <div :class=\"store.classes\">\r\n    <div class=\"gc-data-header\">\r\n        <div>&nbsp;</div>\r\n        <div v-for=\"cell in fields\" :key=\"cell.name\" :class=\"cell.name\">{{ cell.label }}</div>\r\n        <div v-if=\"store.sort\">&nbsp;</div>\r\n    </div>\r\n    <div class=\"gc-tree gc-drop-target\" ref=\"treeroot\">\r\n        <gc-tree-node v-for=\"(obj, index) in store.data\" :key=\"index\" :branch=\"obj\" :store=\"store\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue'\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCTreeNode from \"./gc-tree-node.vue\"\r\nimport GCDragDrop from \"./../js/dragndrop.js\"\r\nimport GCFilterForm from \"./gc-filter-form.vue\"\r\nimport GCSelectFields from \"./gc-selectfields.vue\"\r\n\r\n\r\nexport default {\r\n\tname : \"gc-tree\",\r\n    props : {\r\n        store : {\r\n            type : Object,\r\n            required : true\r\n        }\r\n    },\r\n    setup(props) {\r\n       const treeroot = ref(null);\r\n        let base = props.store.exportToViewBlock();\r\n        onMounted(() => {\r\n           //if (ctrl.sort) {\r\n             GCDragDrop.initDD({\r\n               handle : '.gc-drag-handle',\r\n               drag_target : '.gc-draggable',\r\n               drop_target : '.gc-drop-target',\r\n               main : treeroot.value,\r\n               tree : props.store.data,\r\n               callback : props.store.saveSort\r\n             });\r\n           //}\r\n        });\r\n\r\n       return { ...base, treeroot};\r\n   },\r\n    components : {\r\n        \"gc-nav\" : GCNav,\r\n        \"gc-tree-node\" : GCTreeNode,\r\n        \"gc-filter-form\" : GCFilterForm,\r\n        \"gc-selectfields\" : GCSelectFields\r\n    }\r\n}\r\n\r\n\r\n</script>\r\n","<template>\r\n<div :class=\"store.classes\">\r\n    <table class=\"gc-data-table\">\r\n    <thead>\r\n        <tr class=\"gc-data-header\">\r\n        <th v-for=\"cell in fields\" :key=\"cell.name\" :class=\"cell.name\">{{ cell.label }}\r\n            <span v-if=\"sortable == false\" class=\"material-icons\" @click=\"orderBy(cell, false);\">keyboard_arrow_up</span>\r\n            <span v-if=\"sortable == false\" class=\"material-icons\" @click=\"orderBy(cell, true);\">keyboard_arrow_down</span>\r\n        </th>\r\n        <th v-if=\"sortable\">&nbsp;</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody class=\"gc-data-tbody\">\r\n      <tr class=\"gc-data-row\" v-for=\"(obj, rindex) in store.data\" :key=\"rindex\" @click=\"store.next(obj[primarykey]);\">\r\n        <td v-for=\"(field, index) in fields\" :key=\"index\" :class=\"field.name\">{{ obj[field.name] }}</td>\r\n        <td v-if=\"sortable\">\r\n            <a data-action=\"more\" class=\"button\" @click.prevent=\"toggle\" draggable=\"true\">\r\n                <span class=\"material-icons\">drag</span>\r\n            </a>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n    </table>\r\n    <gc-pagination v-if=\"overlimit\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport GCPagination from \"./gc-pagination.vue\"\r\n\r\n\r\nexport default {\r\n    name: 'gc-table',\r\n    props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      }\r\n    },\r\n    setup(props) {\r\n        return props.store.exportToViewBlock();\r\n    },\r\n    methods : {\r\n        orderBy(cell, dir) {\r\n            let order = {};\r\n            order[cell.name] = dir;\r\n            this.store.orderby = order;\r\n            if (this.store.pages > 0) {\r\n                this.store.load();\r\n            } else {\r\n                //custom sort on the table\r\n                if (dir) {\r\n                    this.store.data.sort(function(x, y) {\r\n                        let xval = x[cell.name];\r\n                        let yval = y[cell.name];\r\n                        if (xval < yval) {\r\n                            return -1;\r\n                        } else if (xval > yval) {\r\n                            return 1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.store.data.sort(function(x, y) {\r\n                        let xval = x[cell.name];\r\n                        let yval = y[cell.name];\r\n                        if (xval < yval) {\r\n                            return 1;\r\n                        } else if (xval > yval) {\r\n                            return -1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    },\r\n    computed : {\r\n        sortable() {\r\n            return (this.store.sort) ? true : false;\r\n        },\r\n        overlimit() {\r\n            return false;\r\n        },\r\n        primarykey() {\r\n            return this.store.primarykey;\r\n        }\r\n    },\r\n    components : {\r\n        \"gc-pagination\" : GCPagination,\r\n    }\r\n\r\n   \r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n\r\n.table, .thead, .tbody, .tr {\r\n    width : 100%;\r\n}\r\n\r\n\r\n</style>","<template>\r\n<div :class=\"store.classes\">\r\n    <table class=\"gc-data-table\">\r\n    <thead>\r\n        <tr class=\"gc-data-header\">\r\n        <th v-for=\"cell in fields\" :key=\"cell.name\" :class=\"cell.name\">{{ cell.label }}\r\n            <span v-if=\"sortable == false\" class=\"material-icons\" @click=\"orderBy(cell, false);\">keyboard_arrow_up</span>\r\n            <span v-if=\"sortable == false\" class=\"material-icons\" @click=\"orderBy(cell, true);\">keyboard_arrow_down</span>\r\n        </th>\r\n        <th v-if=\"sortable\">&nbsp;</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody class=\"gc-data-tbody\">\r\n      <tr class=\"gc-data-row\" v-for=\"(obj, rindex) in store.data\" :key=\"rindex\" @click=\"store.next(obj[primarykey]);\">\r\n        <td v-for=\"(field, index) in fields\" :key=\"index\" :class=\"field.name\">{{ obj[field.name] }}</td>\r\n        <td v-if=\"sortable\">\r\n            <a data-action=\"more\" class=\"button\" @click.prevent=\"toggle\" draggable=\"true\">\r\n                <span class=\"material-icons\">drag</span>\r\n            </a>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n    </table>\r\n    <gc-pagination v-if=\"overlimit\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport GCPagination from \"./gc-pagination.vue\"\r\n\r\n\r\nexport default {\r\n    name: 'gc-table',\r\n    props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      }\r\n    },\r\n    setup(props) {\r\n        return props.store.exportToViewBlock();\r\n    },\r\n    methods : {\r\n        orderBy(cell, dir) {\r\n            let order = {};\r\n            order[cell.name] = dir;\r\n            this.store.orderby = order;\r\n            if (this.store.pages > 0) {\r\n                this.store.load();\r\n            } else {\r\n                //custom sort on the table\r\n                if (dir) {\r\n                    this.store.data.sort(function(x, y) {\r\n                        let xval = x[cell.name];\r\n                        let yval = y[cell.name];\r\n                        if (xval < yval) {\r\n                            return -1;\r\n                        } else if (xval > yval) {\r\n                            return 1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.store.data.sort(function(x, y) {\r\n                        let xval = x[cell.name];\r\n                        let yval = y[cell.name];\r\n                        if (xval < yval) {\r\n                            return 1;\r\n                        } else if (xval > yval) {\r\n                            return -1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    },\r\n    computed : {\r\n        sortable() {\r\n            return (this.store.sort) ? true : false;\r\n        },\r\n        overlimit() {\r\n            return false;\r\n        },\r\n        primarykey() {\r\n            return this.store.primarykey;\r\n        }\r\n    },\r\n    components : {\r\n        \"gc-pagination\" : GCPagination,\r\n    }\r\n\r\n   \r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n\r\n.table, .thead, .tbody, .tr {\r\n    width : 100%;\r\n}\r\n\r\n\r\n</style>","<template>\r\n<div :class=\"store.classes\" v-if=\"active\">\r\n    <gc-repo-header :store=\"store\" />\r\n    <component :key=\"key\" :is=\"store.rawcomponent\" :store=\"store\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport GCRepoHeader from \"./gc-repo-header.vue\"\r\nimport GCTree from \"./gc-tree.vue\"\r\nimport GCTable from \"./gc-table.vue\"\r\n\r\n\r\nexport default {\r\n  name: 'gc-repo',\r\n  props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      },\r\n      active : {\r\n          type : Boolean,\r\n          default : false\r\n      }\r\n  },\r\n  setup(props) {\r\n      let obj = props.store.exportToViewBlock();\r\n      obj.key = props.store.model + \"-\" + props.store.action;\r\n      return obj;\r\n  },\r\n    components : {\r\n        \"gc-repo-header\" : GCRepoHeader,\r\n        \"gc-tree\" : GCTree,\r\n        \"gc-table\" : GCTable\r\n    }\r\n\r\n   \r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n\r\n.table, .thead, .tbody, .tr {\r\n    width : 100%;\r\n}\r\n\r\n\r\n\r\n.gc-data-row:nth-child(odd) {background : #CCC}\r\n\r\n</style>","<template>\r\n<div :class=\"store.classes\" v-if=\"active\">\r\n    <gc-repo-header :store=\"store\" />\r\n    <component :key=\"key\" :is=\"store.rawcomponent\" :store=\"store\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport GCRepoHeader from \"./gc-repo-header.vue\"\r\nimport GCTree from \"./gc-tree.vue\"\r\nimport GCTable from \"./gc-table.vue\"\r\n\r\n\r\nexport default {\r\n  name: 'gc-repo',\r\n  props : {\r\n      store : {\r\n          type : Object,\r\n          required : true\r\n      },\r\n      active : {\r\n          type : Boolean,\r\n          default : false\r\n      }\r\n  },\r\n  setup(props) {\r\n      let obj = props.store.exportToViewBlock();\r\n      obj.key = props.store.model + \"-\" + props.store.action;\r\n      return obj;\r\n  },\r\n    components : {\r\n        \"gc-repo-header\" : GCRepoHeader,\r\n        \"gc-tree\" : GCTree,\r\n        \"gc-table\" : GCTable\r\n    }\r\n\r\n   \r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n\r\n.table, .thead, .tbody, .tr {\r\n    width : 100%;\r\n}\r\n\r\n\r\n\r\n.gc-data-row:nth-child(odd) {background : #CCC}\r\n\r\n</style>","\r\nconst history = [];\r\nlet cb;\r\n\r\n\r\n\r\nfunction setRoute(uri, title = '') {\r\n    history.push({ r : uri, label : title });\r\n    window.history.pushState({'name' : uri}, document.title, uri);\r\n    runRoute(uri);\r\n}\r\n\r\n\r\nfunction hardSetRoute(route) {\r\n    window.location = route;\r\n}\r\n\r\n\r\nwindow.onpopstate = function(ev) {\r\n    runRoute(document.location);\r\n}\r\n\r\n\r\nfunction runRoute(uri) {\r\n    if (!uri) uri = window.location.pathname;\r\n    if (cb) cb(uri);\r\n}\r\n\r\nfunction regCallback(callback) {\r\n    cb = callback;\r\n}\r\n\r\n\r\n\r\n\r\nexport default {\r\n    setRoute,\r\n    hardSetRoute,\r\n    runRoute,\r\n    regCallback\r\n}","<template>\r\n  <span class=\"gc-breadcrumbs\">\r\n  <a v-for=\"route in arr\" v-bind:key=\"route\" @click=\"setRoute(route.r);\">\r\n    {{ route.n }}\r\n  </a> \r\n  </span>\r\n</template>\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport Router from \"./../js/router.js\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-nav',\r\n  props: {\r\n    state : Object\r\n  },\r\n  methods : {\r\n      setRoute(route) {\r\n          Router.switchRoute(route);\r\n      }\r\n  },\r\n  computed : {\r\n      arr() {\r\n         return Router.history;\r\n      }\r\n  }\r\n   \r\n});\r\n</script>","<template>\r\n  <span class=\"gc-breadcrumbs\">\r\n  <a v-for=\"route in arr\" v-bind:key=\"route\" @click=\"setRoute(route.r);\">\r\n    {{ route.n }}\r\n  </a> \r\n  </span>\r\n</template>\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport Router from \"./../js/router.js\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-nav',\r\n  props: {\r\n    state : Object\r\n  },\r\n  methods : {\r\n      setRoute(route) {\r\n          Router.switchRoute(route);\r\n      }\r\n  },\r\n  computed : {\r\n      arr() {\r\n         return Router.history;\r\n      }\r\n  }\r\n   \r\n});\r\n</script>","<template>\r\n    <gc-breadcrumbs :state=\"store\" />\r\n    <gc-widget :title=\"title\" :active=\"active\">\r\n        <div :class=\"store.classes\">\r\n            <h1>{{ store.title }}</h1>\r\n            <span class=\"gc-nav\">\r\n                <a v-if=\"editnav\" @click=\"setRoute(editnav.r, editnav.params);\">{{ editnav.n }}</a>\r\n                <a v-if=\"delnav\" @click=\"runDel();\">{{ delnav.n }}</a>\r\n            </span>\r\n            <div v-for=\"(field, index) in store.fields\" :key=\"index\" :class=\"field.name\">\r\n                <span>{{ field.label }}:</span> \r\n                <span>{{ store.data[field.name] }}</span>\r\n            </div>\r\n        </div>\r\n    </gc-widget>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent  } from 'vue'\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCBreadCrumbs from \"./gc-breadcrumbs.vue\"\r\nimport GCWidget from \"./gc-widget-window.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-single-item',\r\n  props : {\r\n      store : Object,\r\n      active : {\r\n          type : Boolean,\r\n          default : false\r\n      }\r\n  },\r\n  setup(props) {\r\n      return props.store.exportToViewBlock();\r\n  },\r\n  computed : {\r\n      editnav() {\r\n          return this.store.actions.put;\r\n      },\r\n      delnav() {\r\n          return this.store.actions.delete;\r\n      },\r\n      title() {\r\n          return this.store.title + \" \" + this.store.summary();\r\n      }\r\n  },\r\n  methods : {\r\n      runDel() {\r\n          this.store.runDelete();\r\n      }\r\n  },\r\n  components : {\r\n    \"gc-nav\" : GCNav, \"gc-breadcrumbs\" : GCBreadCrumbs, \"gc-widget\" : GCWidget\r\n  }\r\n});\r\n    \r\n\r\n</script>","<template>\r\n    <gc-breadcrumbs :state=\"store\" />\r\n    <gc-widget :title=\"title\" :active=\"active\">\r\n        <div :class=\"store.classes\">\r\n            <h1>{{ store.title }}</h1>\r\n            <span class=\"gc-nav\">\r\n                <a v-if=\"editnav\" @click=\"setRoute(editnav.r, editnav.params);\">{{ editnav.n }}</a>\r\n                <a v-if=\"delnav\" @click=\"runDel();\">{{ delnav.n }}</a>\r\n            </span>\r\n            <div v-for=\"(field, index) in store.fields\" :key=\"index\" :class=\"field.name\">\r\n                <span>{{ field.label }}:</span> \r\n                <span>{{ store.data[field.name] }}</span>\r\n            </div>\r\n        </div>\r\n    </gc-widget>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent  } from 'vue'\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCBreadCrumbs from \"./gc-breadcrumbs.vue\"\r\nimport GCWidget from \"./gc-widget-window.vue\"\r\n\r\nexport default defineComponent({\r\n  name: 'gc-single-item',\r\n  props : {\r\n      store : Object,\r\n      active : {\r\n          type : Boolean,\r\n          default : false\r\n      }\r\n  },\r\n  setup(props) {\r\n      return props.store.exportToViewBlock();\r\n  },\r\n  computed : {\r\n      editnav() {\r\n          return this.store.actions.put;\r\n      },\r\n      delnav() {\r\n          return this.store.actions.delete;\r\n      },\r\n      title() {\r\n          return this.store.title + \" \" + this.store.summary();\r\n      }\r\n  },\r\n  methods : {\r\n      runDel() {\r\n          this.store.runDelete();\r\n      }\r\n  },\r\n  components : {\r\n    \"gc-nav\" : GCNav, \"gc-breadcrumbs\" : GCBreadCrumbs, \"gc-widget\" : GCWidget\r\n  }\r\n});\r\n    \r\n\r\n</script>","<template>\r\n <div>\r\n    <gc-form :store=\"store\" />\r\n    <div>\r\n        <span v-if=\"hasPost\" class=\"gc-nav\">\r\n            <a @click=\"setRoute(store.actions.post.r);\">{{ dict(\"post\", store.actions.post.n) }}</a>\r\n        </span>\r\n        <span v-if=\"hasLogin\" clas=\"gc-nav\">\r\n            <a @click=\"setRoute(store.actions.login.r);\">{{ dict(\"post\", store.actions.login.n) }}</a>\r\n        </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCForm from \"./gc-form.vue\"\r\nimport Dictionary from \"./../js/dictionary.js\"\r\n\r\n\r\n \r\nexport default defineComponent({\r\n  name: 'gc-login',\r\n  props : {\r\n      store : Object\r\n  },\r\n  setup(props) {\r\n      return { ...props.store.exportToViewBlock(), ...Dictionary.exportToView(props.store.model + \"-\" + props.store.action)}\r\n  },\r\n  computed : {\r\n      hasLogin() {\r\n          if (this.store.getModelType() == \"post\") {\r\n              if (this.store.actions.login) {\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      },\r\n      hasPost() {\r\n          if (this.store.getModelType() == \"login\") {\r\n              if (this.store.actions.post) {\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      }\r\n  },\r\n  components : \r\n    {\r\n      \"gc-form\" : GCForm\r\n    }\r\n});\r\n</script>\r\n\r\n\r\n","<template>\r\n <div>\r\n    <gc-form :store=\"store\" />\r\n    <div>\r\n        <span v-if=\"hasPost\" class=\"gc-nav\">\r\n            <a @click=\"setRoute(store.actions.post.r);\">{{ dict(\"post\", store.actions.post.n) }}</a>\r\n        </span>\r\n        <span v-if=\"hasLogin\" clas=\"gc-nav\">\r\n            <a @click=\"setRoute(store.actions.login.r);\">{{ dict(\"post\", store.actions.login.n) }}</a>\r\n        </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { defineComponent } from 'vue'\r\nimport GCForm from \"./gc-form.vue\"\r\nimport Dictionary from \"./../js/dictionary.js\"\r\n\r\n\r\n \r\nexport default defineComponent({\r\n  name: 'gc-login',\r\n  props : {\r\n      store : Object\r\n  },\r\n  setup(props) {\r\n      return { ...props.store.exportToViewBlock(), ...Dictionary.exportToView(props.store.model + \"-\" + props.store.action)}\r\n  },\r\n  computed : {\r\n      hasLogin() {\r\n          if (this.store.getModelType() == \"post\") {\r\n              if (this.store.actions.login) {\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      },\r\n      hasPost() {\r\n          if (this.store.getModelType() == \"login\") {\r\n              if (this.store.actions.post) {\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      }\r\n  },\r\n  components : \r\n    {\r\n      \"gc-form\" : GCForm\r\n    }\r\n});\r\n</script>\r\n\r\n\r\n","<template>\r\n    <div class=\"gc-tabs\">\r\n        <gc-nav :actions=\"actions\" />\r\n        <div class=\"tab\" >\r\n            <component :key=\"key\" :is=\"component\" :store=\"this.group.model\" :active=\"this.group.active\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n\r\nimport GCForm from \"./gc-form.vue\"\r\nimport GCRepo from \"./gc-repo.vue\"\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCSingleItem from \"./gc-single-item.vue\"\r\nimport GCAccountHandler from \"./gc-accounthandler.vue\"\r\n\r\n\r\nimport { defineComponent, inject } from 'vue'\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        group : {\r\n            type : Object,\r\n            required : true\r\n        },\r\n        active : {\r\n            type : Boolean,\r\n            default : false\r\n        }\r\n    },\r\n    setup(props) {\r\n        let ctrl = inject(\"ctrl\");\r\n        return {\r\n           ctrl, 'group' : props.group\r\n        }\r\n    },\r\n    computed : {\r\n        key() {\r\n            if (!this.model) return \"\";\r\n            else return this.model.model + \"-\" + this.model.action;\r\n        },\r\n        actions() {\r\n            return this.group.siblings.set;\r\n        },\r\n        model() {\r\n            return this.group.model;\r\n        },\r\n        component() {\r\n            if (!this.model) return \"\";\r\n            else return this.model.component;\r\n        },\r\n        actualcomponent() {\r\n\r\n        }\r\n    },\r\n    components : {\r\n        'gc-form' : GCForm,\r\n        'gc-nav' : GCNav,\r\n        'gc-single-item' : GCSingleItem,\r\n        'gc-account-handler' : GCAccountHandler,\r\n        'gc-repo' : GCRepo\r\n    }\r\n\r\n});\r\n</script>","<template>\r\n    <div class=\"gc-tabs\">\r\n        <gc-nav :actions=\"actions\" />\r\n        <div class=\"tab\" >\r\n            <component :key=\"key\" :is=\"component\" :store=\"this.group.model\" :active=\"this.group.active\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n\r\nimport GCForm from \"./gc-form.vue\"\r\nimport GCRepo from \"./gc-repo.vue\"\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCSingleItem from \"./gc-single-item.vue\"\r\nimport GCAccountHandler from \"./gc-accounthandler.vue\"\r\n\r\n\r\nimport { defineComponent, inject } from 'vue'\r\n\r\nexport default defineComponent({\r\n    props : {\r\n        group : {\r\n            type : Object,\r\n            required : true\r\n        },\r\n        active : {\r\n            type : Boolean,\r\n            default : false\r\n        }\r\n    },\r\n    setup(props) {\r\n        let ctrl = inject(\"ctrl\");\r\n        return {\r\n           ctrl, 'group' : props.group\r\n        }\r\n    },\r\n    computed : {\r\n        key() {\r\n            if (!this.model) return \"\";\r\n            else return this.model.model + \"-\" + this.model.action;\r\n        },\r\n        actions() {\r\n            return this.group.siblings.set;\r\n        },\r\n        model() {\r\n            return this.group.model;\r\n        },\r\n        component() {\r\n            if (!this.model) return \"\";\r\n            else return this.model.component;\r\n        },\r\n        actualcomponent() {\r\n\r\n        }\r\n    },\r\n    components : {\r\n        'gc-form' : GCForm,\r\n        'gc-nav' : GCNav,\r\n        'gc-single-item' : GCSingleItem,\r\n        'gc-account-handler' : GCAccountHandler,\r\n        'gc-repo' : GCRepo\r\n    }\r\n\r\n});\r\n</script>","function decodeParams() {\r\n    const params = new URLSearchParams(window.location.search);\r\n    let param_obj = {};\r\n    params.forEach(function(value, key) {\r\n        if (key == \"graph\") {\r\n            let graph_obj = JSON.parse(decodeURIComponent(value));\r\n            param_obj = { ...param_obj, ...graph_obj};\r\n        } else {\r\n            param_obj[key] = value;\r\n        }\r\n    });\r\n    return param_obj;\r\n} \r\n\r\n\r\nfunction encodeParams(params) {\r\n    let graph = {};\r\n    let cstr = [];\r\n    for(let i in params) {\r\n        if (typeof params[i] === 'object' && params[i]) {\r\n            graph[i] = params[i];\r\n        } else if (Array.isArray(params[i])) {\r\n            graph[i] = params[i];\r\n        } else {\r\n            cstr.push(i + \"=\" + encodeURIComponent(params[i]));\r\n        }\r\n    }\r\n\r\n    if (Object.keys(graph).length > 0) cstr.push( \"graph=\" + encodeURIComponent(JSON.stringify(graph)));\r\n    return cstr.join(\"&\");\r\n}\r\n\r\nfunction mapParams(url, params) {\r\n    for(let i in params) {\r\n        const key = \"${\" + i + \"}\";\r\n        const regex = new RegExp(key, \"g\");\r\n        url = url.replace(regex, params[i]);\r\n    }\r\n    return url;\r\n}\r\n\r\nexport default {\r\n    encodeParams,\r\n    decodeParams,\r\n    mapParams\r\n}","import Params from \"./params.js\"\r\nimport Router from \"./router.js\"\r\n\r\n\r\nlet route_base = \"\";\r\n\r\n\r\n\r\n\r\n//set this as our current map\r\nlet ctrl_map = [];\r\nlet params = {};\r\n\r\nfunction regParam(name, val) {\r\n    params[name] = val;\r\n}\r\n\r\nfunction removeParam(name) {\r\n    delete params[name];\r\n}\r\n\r\n\r\nfunction regCtrl(map) {\r\n    ctrl_map.push(map);\r\n}\r\n\r\n\r\nfunction convertFromURL(url) {\r\n    url = url.replace(route_base, \"\");\r\n    let exp = url.split(\"/c\");\r\n    for(let i in exp) {\r\n        if (ctrl_map.length <= i) {\r\n            throw \"Controller hasn't been registered\";\r\n        }\r\n        ctrl_map[i].convertFromURL(exp[i])\r\n    }\r\n}\r\n\r\nfunction convertToURL() {\r\n    let url_parts = [];\r\n    for(let map of ctrl_map) {\r\n        url_parts.push(map.convertToURL());\r\n    }\r\n\r\n    let url = route_base + url_parts.join(\"/c\");\r\n    const param_str = Params.encodeParams(params);\r\n    if (param_str) url += \"?\" + param_str;\r\n    return url;\r\n}\r\n\r\nfunction setBase(base) {\r\n    //trim any leading or trailing / so we can be sure we are dealing with the correct format\r\n    base = base.replace(/^\\/+|\\/+$/g, '');\r\n    route_base = \"/\" + base;\r\n}\r\n\r\n\r\nfunction runRoute() {\r\n    const url = convertToURL();\r\n    Router.setRoute(url);\r\n}\r\n\r\nfunction reloadFromBase(url) {\r\n    if (url) url = url.replace(/^\\/+/g, '');\r\n    Router.hardSetRoute(route_base + \"/\" + url);\r\n}\r\n\r\n\r\nRouter.regCallback(convertFromURL);\r\n\r\n\r\nexport default {\r\n    regCtrl,\r\n    regParam,\r\n    removeParam,\r\n    setBase,\r\n    convertToURL,\r\n    runRoute,\r\n    reloadFromBase,\r\n    convertFromURL\r\n}","<template>\r\n    <a @click=\"logout\">Logout</a>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport Client from \"./../js/client.js\"\r\nimport CtrlMapper from \"./../js/ctrltoroutemapper.js\"\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n        \r\n    },\r\n    methods : {\r\n        logout() {\r\n            Client.post(\"/core-logout\")\r\n            .then(response => {\r\n                CtrlMapper.reloadFromBase();\r\n            });\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <a @click=\"logout\">Logout</a>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\nimport Client from \"./../js/client.js\"\r\nimport CtrlMapper from \"./../js/ctrltoroutemapper.js\"\r\n\r\nexport default defineComponent({\r\n    setup() {\r\n        \r\n    },\r\n    methods : {\r\n        logout() {\r\n            Client.post(\"/core-logout\")\r\n            .then(response => {\r\n                CtrlMapper.reloadFromBase();\r\n            });\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n<gc-account-details v-if=\"isaccount\" />\r\n  <div class=\"gc-root gc-wrapper\" v-for=\"(group, index) in groups\" :key=\"index\">\r\n    <gc-nav  :actions=\"group.actions\"  />\r\n    <gc-tabs :group=\"group\"/>\r\n </div>\r\n</template>\r\n<script>\r\n\r\nimport { defineComponent, inject } from 'vue'\r\nimport GCTabs from \"./gc-tabs.vue\"\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCAccountDetails from \"./gc-account-details.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n    name : 'gc-root',\r\n    setup() {\r\n        const ctrl = inject(\"ctrl\");\r\n        return { ctrl }\r\n    }, \r\n    computed : {\r\n        groups() {\r\n            return this.ctrl.store.groups;\r\n        },\r\n        isaccount() {\r\n            return this.ctrl.store.profile == \"public\" ? false : true;\r\n        }\r\n    },\r\n    components : {\r\n        'gc-tabs' : GCTabs, \"gc-nav\" : GCNav, \"gc-account-details\" : GCAccountDetails\r\n\r\n    }\r\n});\r\n</script>","<template>\r\n<gc-account-details v-if=\"isaccount\" />\r\n  <div class=\"gc-root gc-wrapper\" v-for=\"(group, index) in groups\" :key=\"index\">\r\n    <gc-nav  :actions=\"group.actions\"  />\r\n    <gc-tabs :group=\"group\"/>\r\n </div>\r\n</template>\r\n<script>\r\n\r\nimport { defineComponent, inject } from 'vue'\r\nimport GCTabs from \"./gc-tabs.vue\"\r\nimport GCNav from \"./gc-nav.vue\"\r\nimport GCAccountDetails from \"./gc-account-details.vue\"\r\n\r\n\r\nexport default defineComponent({\r\n    name : 'gc-root',\r\n    setup() {\r\n        const ctrl = inject(\"ctrl\");\r\n        return { ctrl }\r\n    }, \r\n    computed : {\r\n        groups() {\r\n            return this.ctrl.store.groups;\r\n        },\r\n        isaccount() {\r\n            return this.ctrl.store.profile == \"public\" ? false : true;\r\n        }\r\n    },\r\n    components : {\r\n        'gc-tabs' : GCTabs, \"gc-nav\" : GCNav, \"gc-account-details\" : GCAccountDetails\r\n\r\n    }\r\n});\r\n</script>","export class Validator {\r\n\r\n    constructor() {\r\n        this._min;\r\n        this._max;\r\n        this._has = [];\r\n        this._has_not = [];\r\n        this._errors = {\r\n            'OK' : 0,\r\n            'MIN_VALUE' : 1,\r\n            'MAX_VALUE' : 2,\r\n            'HAS' : 3,\r\n            'HAS_NOT' : 4\r\n        }\r\n    }\r\n\r\n    set min(min) {\r\n        this._min = min;\r\n    }\r\n\r\n    set max(max) {\r\n        this._max = max;\r\n    }\r\n\r\n    set has(has) {\r\n        this._has.push(has);\r\n    }\r\n\r\n    set nothas(nhas) {\r\n        this._has_not.push(nhas);\r\n    }\r\n\r\n\r\n    validateSize(val) {\r\n        if (val < this._min) return this._errors.MIN_VALUE;\r\n        else if (val > this._max) return this._errors.MAX_VALUE;\r\n        else return this._errors.OK;\r\n    }\r\n\r\n\r\n    validate(val) {\r\n        let err;\r\n        if (isNaN(val)) {\r\n            const length = (val) ? val.length : 0;\r\n            err = this.validateSize(length);\r\n        } else {\r\n            err = this.validateSize(val);\r\n        }\r\n        if (err != this._errors.OK) return err;\r\n\r\n        for(let nhas of this._has_not) {\r\n            if (val.match(nhas)) return this._errors.HAS_NOT;\r\n        }\r\n\r\n        if (this._has.length == 0) return this._errors.OK;\r\n        \r\n        for(let has of this._has) {\r\n            if (val.match(this._has)) return this._errors.OK;\r\n        }\r\n        return this._errors.HAS;\r\n    }\r\n\r\n}","import { Validator } from \"./validator.js\"\r\nimport Errors from \"./error.js\"\r\n\r\nexport class Field  {\r\n\r\n    constructor(name, obj = null) {\r\n        this._name = name;\r\n        this._type;\r\n        this._is_primary = false;\r\n        this._is_parent = false;\r\n        this._valid = 1;\r\n        this._atts={}\r\n        this._confirm = false;\r\n        this._readonly = false;\r\n        this._placeholder = \"\";\r\n        this._conditions;\r\n        this._link;\r\n        this._reference;\r\n        this._error = 0;\r\n        this._label = \"\";\r\n        this._on = true;\r\n        this._summary = false;\r\n        this._default = null;\r\n        this._validator = new Validator();\r\n       \r\n        if (obj) {\r\n            for (let x in obj) {\r\n                if (x == \"field\" || x == \"validator\") continue;\r\n                this[x] = obj[x];\r\n            }\r\n\r\n            if (obj.field) {\r\n                for(let x in obj.field) {\r\n                    this[x] = obj.field[x];\r\n                }\r\n            }\r\n\r\n            if (obj.validation) {\r\n                for(let x in obj.validation) {\r\n                    this._validator[x] = obj.validation[x];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set confirm(confirm) {\r\n        this._confirm = confirm;\r\n    }\r\n\r\n    set readonly(readonly) {\r\n        this._readonly = readonly;\r\n    }\r\n\r\n    set placeholder(placeholder) {\r\n        this._placeholder = placeholder;\r\n    }\r\n\r\n    set atts(atts) {\r\n        this._atts = atts;\r\n    }\r\n\r\n    set default(def) {\r\n        this._default = def;\r\n    }\r\n\r\n    set conditions(conditions) {\r\n        this._conditions = conditions;\r\n    }\r\n\r\n    set link(link) {\r\n        this._link = link;\r\n    }\r\n\r\n    set name(name) {\r\n        this._name = name;\r\n    }\r\n\r\n    set type(type) {\r\n        this._type = type;\r\n    }\r\n\r\n    set on(on) {\r\n        this._on = on;\r\n    }\r\n\r\n    set is_primary(val) {\r\n        this._is_primary = val;\r\n    }\r\n\r\n    set is_parent(val) {\r\n        this._is_parent = val;\r\n    }\r\n\r\n    set reference(ref) {\r\n        this._reference = ref;\r\n    }\r\n\r\n    set error(err) {\r\n        this._error = err;\r\n    }\r\n\r\n    set label(label) {\r\n        this._label = label;\r\n    }\r\n\r\n    set summary(summary) {\r\n        this._summary = summary;\r\n    }\r\n\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    get isprimary() {\r\n        return this._is_primary;\r\n    }\r\n\r\n    get required() {\r\n        return (this._min > 0) ? true : false;\r\n    }\r\n\r\n    get summary() {\r\n        return this._summary;\r\n    }\r\n\r\n    get readonly() {\r\n        return this._readonly;\r\n    }\r\n\r\n    get placeholder() {\r\n        return this._placeholder;\r\n    }\r\n\r\n    get default() {\r\n        return this._default;\r\n    }\r\n\r\n    get on() {\r\n        return this._on;\r\n    }\r\n\r\n    get atts() {\r\n        return this._atts;\r\n    }\r\n\r\n    get conditions() {\r\n        return this._conditions;\r\n    }\r\n\r\n    get link() {\r\n        return this._link;\r\n    }\r\n\r\n    get isparent() {\r\n        return this._is_parent\r\n    }\r\n\r\n    get confirm() {\r\n        return this._confirm;\r\n    }\r\n\r\n    get reference() {\r\n        return this._reference;\r\n    }\r\n\r\n    get error() {\r\n        if (!this._error) return \"\";\r\n        else if (isNaN(this._error)) return this._error;\r\n        else return Errors.getError(this._error);\r\n    }\r\n\r\n    get label() {\r\n        return this._label;\r\n    }\r\n\r\n    validate(value) {\r\n        return this._validator.validate(value);\r\n    }\r\n\r\n    exp() {\r\n        return {\r\n            name : this._name,\r\n            type : this._type,\r\n            atts : this._atts\r\n        }\r\n    }\r\n\r\n    calcValue(value) {\r\n        if (!value) return \"\";\r\n        else return value;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import { Field } from \"./../field.js\"\r\nimport { reactive, computed, inject, ref } from \"vue\"\r\nimport Client from \"./../client.js\"\r\nimport Dictionary from \"./../dictionary.js\"\r\n\r\nexport class ModelState {\r\n    constructor(model, parent_value, route) {\r\n        this._model = model;\r\n        this._action = null;\r\n        this._api_urls = route.api_urls;\r\n        this._primary_key = route.primarykey;\r\n        this._parent_key = route.parentkey;\r\n        this._parent_value = parent_value;\r\n        this._key = 0;\r\n        this._params = {};\r\n        this._fields = reactive(route.fields);\r\n        this._data = reactive({});\r\n        this._label = route.label;\r\n        this._title = route.title;\r\n        this._component;\r\n        this._actions = null;\r\n        this._next = null;\r\n        this._custom = (route.custom) ? route.custom : {};\r\n     \r\n\r\n        for(let c in route) {\r\n            if (c.charAt(0) != \"_\") this[\"_\" + c] = route[c];\r\n            else this[c] = route[c];\r\n        }\r\n    }\r\n\r\n\r\n    get classes() {\r\n        return this._model.replace('/', '') + \" gc-\" + this._action + \" gc-\" + this.getModelType() + \" \" + this._component;\r\n    }\r\n    get action() {\r\n        return this._action;\r\n    }\r\n\r\n    get model() {\r\n        return this._model;\r\n    }\r\n\r\n    get component() {\r\n        return this._component;\r\n    }\r\n\r\n    get apiurls() {\r\n        return this._api_urls;\r\n    }\r\n\r\n    get isinit() {\r\n        return this._init;\r\n    }\r\n\r\n    get parentkey() {\r\n        return this._parent_key;\r\n    }\r\n\r\n    get primarykey() {\r\n        return this._primary_key;\r\n    }\r\n\r\n    get key() {\r\n        return this._key;\r\n    }\r\n\r\n    get component() {\r\n        return this._component;\r\n    }\r\n\r\n    get data() {\r\n        return this._data;\r\n    }\r\n\r\n    get fields() {\r\n        return this._fields;\r\n    }\r\n\r\n    get states() {\r\n        return this._states;\r\n    }\r\n\r\n    get params() { \r\n        return this._params;\r\n    }\r\n\r\n    get title() {\r\n        return this._title;\r\n    }\r\n\r\n    get label() {\r\n        return this._label;\r\n    }\r\n\r\n    get data() {\r\n        return this._data;\r\n    }\r\n\r\n    get actions() {\r\n        return this._actions;\r\n    }\r\n\r\n    get next() {\r\n        return this._next;\r\n    }\r\n\r\n    get all_fields() {\r\n        return this._fields;\r\n    }\r\n\r\n    get parentvalue() {\r\n        return this._parent_value;\r\n    }\r\n\r\n    set params(params) {\r\n        this._params = params;\r\n    }\r\n\r\n    set action(action) {\r\n        this._action = action;\r\n    }\r\n\r\n    set apiurls(apiurls) {\r\n        this._api_urls = apiurls;\r\n    }\r\n\r\n    set action(action) {\r\n        this._action = action;\r\n    }\r\n\r\n    set component(comp) {\r\n        this._component = comp;\r\n    }\r\n\r\n    set custom_actions(actions) {\r\n        this._custom_actions = actions;\r\n    }\r\n\r\n    set actions(actions) {\r\n        this._actions = actions;\r\n    }\r\n\r\n    set next(next) {\r\n        this._next = next;\r\n    }\r\n\r\n    set parentvalue(value) {\r\n        this._parent_value = value;\r\n    }\r\n\r\n    addParam(key, value) {\r\n        this._params[key] = value;\r\n    }\r\n\r\n    initFields(name, field_data) {\r\n        this._fields[name] = new Field(name, field_data);\r\n    }\r\n\r\n\r\n    exportToViewBlock() {\r\n        let ctrl = inject(\"ctrl\");\r\n \r\n        function setRoute(route) {\r\n            route();\r\n            ctrl.runLink();\r\n        };\r\n\r\n      \r\n        let fields = computed(() => {\r\n            let active = {};\r\n            for(let f in this._fields) {\r\n                if (this._fields[f].on) active[f] = this._fields[f];\r\n            }\r\n            return active;\r\n        });\r\n\r\n        let obj = {\r\n            setRoute,\r\n            fields,\r\n            ctrl\r\n        };\r\n\r\n        return { ...obj, ...Dictionary.exportToView(this.model + \"-\" + this.action) }\r\n    }\r\n\r\n    exportToViewField(field) {\r\n        let isvalidateon = ref(false);\r\n        let obj = {\r\n            isvalidateon,\r\n            setValidateOn : () => {\r\n                isvalidateon.value = true;\r\n            },\r\n            showError : computed(() => {\r\n                if (!isvalidateon.value || !field.error) return false;\r\n                else return true;\r\n            }),\r\n            validate : () => {\r\n                let data = this._data[field.name];\r\n                this._fields[field.name].error = field.validate(data);\r\n            }\r\n        }\r\n\r\n        if (field.type == \"select\") {\r\n            if (field.reference) {\r\n                obj.options = reactive([]);\r\n                let params = {};\r\n                if (this._parent_key) {\r\n                    params[this._parent_key] = this.parentvalue;\r\n                }\r\n          \r\n                Client.get(field.reference, params)\r\n                .then(response => {\r\n                    for(let i in response.__data) {\r\n                        if (i.indexOf(\"__\") === 0) continue;\r\n                        obj.options.push({ key : response.__data[i].id, value : response.__data[i].value });\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    console.log(e);\r\n                });\r\n            } else {\r\n                obj.options = [];\r\n                for(let opt of field.atts.options) {\r\n                    obj.options.push({key : opt, value : opt});\r\n                }\r\n            }\r\n        }\r\n        return { ...obj, ...Dictionary.exportToView(this.model + \"-\" + this.action + \"-\" + field.name) };\r\n    }\r\n\r\n    runNext() {\r\n        if (this._next) {\r\n            this._next(this);\r\n        }\r\n    }\r\n\r\n}","\r\nimport Client from \"./client.js\"\r\n\r\nexport class Asset {\r\n\r\n    constructor() {\r\n      this._size = 0;\r\n      this._blob = null;\r\n      this._uploaded = false;\r\n      this._chunk_size = 0;\r\n      this._load_url;\r\n      this._save_url;\r\n      this._key = 0;\r\n    }\r\n\r\n    set chunk_size(chunk) {\r\n      this._chunk_size = chunk;\r\n    }\r\n\r\n    set blob(blob) {\r\n      this._blob = blob;\r\n    }\r\n\r\n    set load_url(url) {\r\n        this._load_url = url;\r\n    }\r\n\r\n    set save_url(url) {\r\n        this._save_url = url;\r\n    }\r\n\r\n    set key(key) {\r\n        this._key = key;\r\n    }\r\n\r\n    get blob() {\r\n      return this._blob;\r\n    }\r\n\r\n    get size() {\r\n      return this._size;\r\n    }\r\n\r\n    get uploaded() {\r\n      return this._uploaded;\r\n    }\r\n\r\n    get chunk_size() {\r\n      return this._chunk_size;\r\n    }\r\n\r\n\r\n    get url() {\r\n        return this._url;\r\n    }\r\n\r\n\r\n    getChunk(index) {\r\n      const start = (this._chunk_size == 0) ? 0 : index * this._chunk_size;\r\n      let end = (this._chunk_size == 0) ? this._size : (index + 1) * this._chunk_size;\r\n      if (end > this._size) end = this._size;\r\n      const view = new DataView(this._blob, start, end - start);\r\n      let buffer = [];\r\n      for(let i = 0, n=view.byteLength; i<n; ++i) {\r\n        buffer.push(view.getInt8(i));\r\n      }\r\n      return buffer.join('');\r\n    }\r\n\r\n\r\n    uploadAsset(url, data, chunk_end_cb) {\r\n        return Client.put(url, data)\r\n        .then(() => {\r\n            if (chunk_end_cb) chunk_end_cb();\r\n        })\r\n        .catch(e => {\r\n            alert(e);\r\n        });\r\n    }\r\n\r\n    loadFile(id) {\r\n\r\n    }\r\n\r\n    saveFile(file, id, chunk_end_cb) {\r\n        //this needs to be a promise\r\n        this._size = file.size;\r\n        return new Promise(( resolve, reject) => {\r\n          const fr = new FileReader();\r\n          let _self = this;\r\n          fr.onload = function(e) {\r\n            _self.blob = e.target.result;\r\n            resolve(fr.result);\r\n          }\r\n          fr.onerror = reject;\r\n          fr.readAsArrayBuffer(file);  \r\n        })\r\n        .then(() => {\r\n          let promises = [];\r\n          //else, do we have any assets?\r\n          let chunks = (this.chunk_size == 0) ? 1 : Math.ceil(this.size / this.chunk_size);\r\n          for(let i=0; i<chunks; ++i) {\r\n              const data = {};\r\n              data.__chunk = i;\r\n              data.__blob = this.getChunk(i);\r\n              data.id = id;\r\n              promises.push(this.uploadAsset(this.save_url, data, chunk_end_cb));\r\n          }\r\n          return Promise.all(promises);\r\n        });\r\n      }\r\n\r\n}","import Client from \"../client.js\"\r\nimport { ModelState } from \"./modelstate.js\"\r\nimport { Asset } from \"../asset.js\"\r\nimport { reactive, computed } from \"vue\"\r\n\r\n\r\nexport class ModelCreate extends ModelState {\r\n    constructor(model, parent_key, route) {\r\n        super(model, parent_key, route);\r\n        this._status = reactive({ total : 0, progress : 0});\r\n        for(let i in this._fields) {\r\n            if (this._fields[i].atts && this._fields[i].atts.type == \"password\") {\r\n                this._fields[i].confirm = true;\r\n            }\r\n        }\r\n        this._component = \"gc-form\";\r\n    }\r\n\r\n    getModelType() {\r\n        return \"post\";\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    load() {\r\n        for(let i in this._fields) {\r\n            if (this._fields[i].type == \"asset\") {\r\n                let kebab_name = this._fields[i].name.replace(\"_\", \"-\");\r\n                this._data[i] = new Asset();\r\n                this._data[i].save_url = this._api_urls.save + \"-\" + kebab_name;\r\n                this._data[i].chunk_size = this._fields[i].chunk_size;\r\n            } else {\r\n                this._data[i] = this._fields[i].default;\r\n            }\r\n        }\r\n      \r\n        if (this._custom.load) {\r\n            return this._custom.load(this);\r\n        }\r\n    }\r\n\r\n\r\n    saveAsset(field) {\r\n        const val = this._data[field.name];\r\n        if (!val) return Promise.resolve();\r\n        asset.saveFile(val, this._key, () => ++this._status.progress);\r\n        this._status.total += asset.num_chunks;\r\n    }\r\n\r\n\r\n    submit() {\r\n        let data = this._data;\r\n        if (this._parent_key) data[this._parent_key] = this.parentvalue;\r\n        return Client.post(this._api_urls.save, data)\r\n        .then(request=>{\r\n            if (request.__status == \"SUCCESS\") {\r\n                this._data[this._primary_key] = request[this._primary_key];\r\n            } else {\r\n                //throw errors\r\n                throw request;\r\n            }\r\n        })\r\n        .then(() => {\r\n            if (this._custom.submit) {\r\n                return this._custom.submit(this);\r\n            }\r\n        })\r\n    }\r\n\r\n    exportToViewField(field) {\r\n        \r\n        let obj = super.exportToViewField(field);\r\n        obj.val = computed({\r\n                get : () =>  {\r\n                    if (field.type == \"checkbox\") return Boolean(this._data[field.name]);\r\n                    else return this._data[field.name];\r\n                },\r\n                set : (val) => {\r\n                    this._data[field.name] = val;\r\n                    obj.validate();\r\n                }     \r\n        });\r\n        return obj;\r\n\r\n    }\r\n\r\n\r\n\r\n}","import Client from \"../client.js\"\r\nimport { ModelState } from \"./modelstate.js\"\r\nimport { Asset } from \"../asset.js\"\r\nimport { reactive, computed } from \"vue\"\r\n\r\n\r\nexport class ModelUpdate extends ModelState {\r\n    constructor(model, parent_key, route) {\r\n        super(model, parent_key, route);\r\n        this._has_changes = {};\r\n        this._status = reactive({ total : 0, progress : 0});\r\n        for(let i in this._fields) {\r\n            if (this._fields[i].atts && this._fields[i].atts.type == \"password\") {\r\n                this._fields[i].confirm = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    getModelType() {\r\n        return \"put\";\r\n    }\r\n\r\n    get component() {\r\n        return \"gc-form\";\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n\r\n    load(key) {\r\n        let params = {};\r\n        params[this._primary_key] = key;\r\n        this._data[this._primary_key] = key;\r\n        return Client.get(this._api_urls.load, params)\r\n        .then(response => {\r\n            for(let i in this._fields) {\r\n                if (this._fields[i].type == \"asset\") {\r\n                    let kebab_name = this._fields[i].name.replace(\"_\", \"-\");\r\n                    this._data[i] = new Asset();\r\n                    this._data[i].load_url = this._api_urls.load_url + \"-\" + kebab_name;\r\n                    this._data[i].save_url = this._api_urls.save + \"-\" + kebab_name;\r\n                    this._data[i].chunk_size = this._fields[i].chunk_size;\r\n                    this._data[i].key = this._key;\r\n                } else {\r\n                    this._data[i] = response[i];\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            if (this._custom.load) {\r\n                return this._custom.load(this);\r\n            }\r\n        })\r\n        .catch(msg => {\r\n            alert(msg);\r\n        });\r\n    }\r\n\r\n\r\n    saveAsset(field) {\r\n        const val = this._data[field.name];\r\n        if (!val) return Promise.resolve();\r\n        asset.saveFile(val, this._key, () => ++this._status.progress);\r\n        this._status.total += asset.num_chunks;\r\n    }\r\n\r\n\r\n    submit() {\r\n        return Client.put(this._api_urls.save, this._data)\r\n        .then(request=>{\r\n            if (request.__status!= \"SUCCESS\") {\r\n                throw request;\r\n            }\r\n        })\r\n        .then(() => {\r\n            if (this._custom.submit) {\r\n                return this._custom.submit(this);\r\n            }\r\n        });\r\n    }\r\n\r\n    exportToViewField(field) {\r\n        let obj = super.exportToViewField(field);\r\n        obj.val = computed({\r\n                get : () =>  {\r\n                    if (field.type == \"checkbox\") return Boolean(this._data[field.name]);\r\n                    else return this._data[field.name];\r\n                },\r\n                set : (val) => {\r\n                    this._has_changes[field.name] = true;\r\n                    this._data[field.name] = val;\r\n                    obj.validate();\r\n                }     \r\n        });\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n\r\n\r\n}","import Client from \"../client.js\"\r\nimport { ModelState } from \"./modelstate.js\"\r\nimport { Asset } from \"../asset.js\"\r\n\r\n\r\n\r\nexport class ModelGetPrimary extends ModelState {\r\n    constructor(model, parent_key, route) {\r\n        super(model, parent_key, route);\r\n        this._component = \"gc-single-item\";\r\n    }\r\n\r\n    get hasdelete() {\r\n        return this._api_urls.delete ? true : false;\r\n    }\r\n\r\n\r\n    getModelType() {\r\n        return \"getprimary\";\r\n    }\r\n\r\n   \r\n    load(key) {\r\n        let params = {};\r\n        if (key) params[this._primary_key] = key;\r\n        return Client.get(this._api_urls.load, params)\r\n        .then(response => {\r\n            for(let i in this._fields) {\r\n                if (this._fields[i].type == \"asset\") {\r\n                    this._data[i] = new Asset();\r\n                    this._data[i].load_url = this._api_urls.load_url + \"-\" + kebab_name;\r\n                    this._data[i].chunk_size = this._fields[i].chunk_size;\r\n                    this._data[i].key = this._key;\r\n                } else {\r\n                    this._data[i] = response[i];\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            if (this._custom.load) {\r\n                return this._custom.load(this);\r\n            }\r\n        })\r\n        .catch(msg => {\r\n            alert(msg);\r\n        });\r\n    }\r\n\r\n\r\n    runDelete() {\r\n        if (!this.hasdelete) return;\r\n        if (confirm(\"Are you sure you want to delete this record?\")) {\r\n            let params = {};\r\n            params[this._primary_key] = this._data[this._primary_key];\r\n            Client.delete(this._api_urls.delete, params)\r\n            .then(() => {\r\n                let params = {};\r\n                if (this._parent_key) params[this._parent_key] = this._data.gets(this._parent_key); \r\n              \r\n            })\r\n            .then(() => {\r\n                if (this._custom.delete) {\r\n                    return this._custom.delete(this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    summary() {\r\n        let str = \"\";\r\n        for(let i in this._field) {\r\n            if (this._fields[i].summary) {\r\n                str += this._fields[i].summary + \" \";\r\n            }\r\n        }\r\n        return str.trim();\r\n    }\r\n}","import Client from \"./../client.js\"\r\nimport { ModelState } from \"./modelstate.js\"\r\nimport { reactive, computed } from \"vue\" \r\n\r\n\r\nexport class ModelGet extends ModelState {\r\n\r\n    constructor(model, parent_key, route) {\r\n        super(model, parent_key, route);\r\n        this._pages = 0;\r\n        this._children = (route.children) ? route.children : [];\r\n        this._circular = route.circular;\r\n        this._component = (route.circular || this._children.length > 0) ? \"gc-tree\" : \"gc-table\";\r\n        this._sort = route.sort;\r\n        this._key;\r\n        this._data = reactive([]);\r\n        this._search_data = reactive({});\r\n        this._active_children = [];\r\n        this._order_by = {};\r\n        this._limit_fields = [];\r\n        this._page = 0;\r\n        this._limit = 1000;\r\n        this._select_fields = [];\r\n        this._selected_fields = [];\r\n\r\n        let x = 0;\r\n        for(let field in this._fields) {\r\n            if (field == this._parent_key) continue;\r\n            if (x < 2 ||  this._fields[field].summary) {\r\n                this._fields[field].on = true;\r\n                this._limit_fields.push(field);\r\n                ++x\r\n            } else {\r\n                this._fields[field].on = false;\r\n                this._select_fields.push(field);\r\n            }\r\n                \r\n            if (this._fields[field].type == \"select\") this._search_data[field] = [];\r\n            else this._search_data[field] = \"\";\r\n        }\r\n    }\r\n\r\n    getModelType() {\r\n        return \"repo\";\r\n    }\r\n\r\n\r\n    get key() {\r\n        return this._key;\r\n    }\r\n\r\n    set key(key) {\r\n        this._key = key;\r\n    }\r\n\r\n    set circular(circ) {\r\n        this._circular = circ;\r\n    }\r\n\r\n    set sort(sort) {\r\n        this._sort = sort;\r\n    }\r\n\r\n    set orderby(order) {\r\n        this._order_by =order;\r\n    }\r\n\r\n    get pages() {\r\n        return this._pages;\r\n    }\r\n\r\n    get component() {\r\n        return \"gc-repo\";\r\n    }\r\n\r\n    get rawcomponent() {\r\n        return this._component;\r\n    }\r\n   \r\n    get orderby() {\r\n        return this._order_by;\r\n    }\r\n\r\n    get circular() {\r\n        return this._circular;\r\n    }\r\n\r\n    get sort() {\r\n        return this._sort;\r\n    }\r\n\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n    get limitedfields() {\r\n        return [...this._limit_fields, ...this._selected_fields];\r\n    }\r\n\r\n    get selectfields() {\r\n        return this._select_fields;\r\n    }\r\n\r\n    get selectedfields() {\r\n        return this._selected_fields;\r\n    }\r\n\r\n    get searchdata() {\r\n        return this._search_data;\r\n    }\r\n\r\n    get activechildren() {\r\n        return this._active_children;\r\n    }\r\n\r\n    get parentvalue() {\r\n        return this._key;\r\n    }\r\n\r\n    set params(params) {\r\n        this._params = params;\r\n    }\r\n\r\n    set selectedfields(fields) {\r\n        this._selected_fields = fields;\r\n    }\r\n\r\n    get params() {\r\n        let params = this._params;\r\n        if (this._key) params[this._parent_key] = this._key;\r\n        const limited_fields = this.limitedfields;\r\n        if (limited_fields > 0) params[\"__fields\"] = limited_fields;\r\n\r\n        if (this._active_children.length > 0) params[\"__children\"] = this._active_children;\r\n\r\n        if (this._search_data) {\r\n            for(let i in this._search_data) {\r\n                if(this._search_data[i]) {\r\n                    if (Array.isArray(this._search_data[i])) {\r\n                        if (this._search_data[i].length > 0) params[i] = this._search_data[i];\r\n                    } else {\r\n                        params[i] = this._search_data[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this._order_by) {\r\n            params[\"__order\"] = this._order_by;\r\n        }\r\n        if (this._pages  > 0) params[\"__limit\"] = this._page + \", \" + this._limit;\r\n        return params;\r\n    }\r\n\r\n\r\n    rLoadObj(data) {\r\n        let obj={};\r\n        for(const field in this._fields) {\r\n            if (this._fields[field].on) {\r\n                obj[field] =  data[field];\r\n            }\r\n        }\r\n        if (this._circular && data[this._model]) {\r\n            if (data[this._model]) {\r\n                obj[this._model] = [];\r\n                for(const i in data[this._model]) {\r\n                    obj[this._model].push(this.rLoadObj(data[this._model][i]));\r\n                }\r\n            }\r\n        }\r\n\r\n        for(const i in this._active_children) {\r\n            const name = this._active_children[i];\r\n            if (data[name]) {\r\n                obj[name] = [];\r\n                for(const x in data[name]) {\r\n                    obj[name].push(this.rLoadObj(data[name][x]));\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n\r\n    load(key) {\r\n        this._key = key;\r\n        this._data = [];\r\n        for(const i in this._fields) {\r\n            this._fields[i].on = false;\r\n        }\r\n        for(const i in this.limitedfields) {\r\n            this._fields[this.limitedfields[i]].on = true;\r\n        }\r\n        return Client.get(this._api_urls.load, this.params)\r\n        .then(response => {\r\n            for(const i in response.__data) {\r\n                const data = this.rLoadObj(response.__data[i]);\r\n                this._data.push(data);\r\n            }\r\n        })\r\n        .then(() => {\r\n            if (this._custom.load) {\r\n                return this._custom.load(this);\r\n            }\r\n        })\r\n        .catch(msg => {\r\n            alert(msg);\r\n        });\r\n    }\r\n\r\n\r\n    submit() {\r\n        return this.load()\r\n    }\r\n\r\n    sortData() {\r\n        this._data.sort((l, r) => {\r\n            if (l[this._primary_key] == r[this._primary_key]) {\r\n                return 0;\r\n            } else if (!this._circular || l[this._circular] == r[this._circular] ) {\r\n                return (l[this._sort] <= r[this._sort]) ? -1 : 1;  \r\n            } else {\r\n                return (l[this._circular] <= r[this._circular]) ? -1 : 1;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    saveSort() {\r\n        let results = [];\r\n        for(let i in this._data) {\r\n            let node = {};\r\n            node[this._primary_key] = this._data[i][this._primary_key];\r\n            if (this._circular) node[this._circular] = this._data[i][this._circular];\r\n            node[this._sort] = this._data[i][this._sort];\r\n            results.push(node);\r\n        }\r\n\r\n\r\n        Client.put(this.state.apiurls.put, results)\r\n        .then(() => {\r\n            if (this._custom.sort) {\r\n                return this._custom.sort(this);\r\n            }\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    updateFields(fields) {\r\n        for(let field of fields) {\r\n            this._fields[field.name].on = field.show;\r\n        }\r\n        this.load();\r\n    }\r\n\r\n    search() {\r\n        let values = data.getData();\r\n        this._params = {};\r\n        for(let i in values) {\r\n            if (values[i] != '') {\r\n                const field = this._fields[i];\r\n                if (field.type == \"checkbox\" || field.type == \"select\") {\r\n                    this._params[i] = values[i];\r\n                } else if (field.type == \"time\") {\r\n                    let args = {};\r\n                    if (values[i][0]) args['min'] = values[i][0];\r\n                    if (values[i][1]) args['max'] = values[i][1];\r\n                    if (args) this._params[i] = args;\r\n                } else {\r\n                    this._params[i] = \"%\" + values[i] + \"%\";\r\n                }\r\n            }\r\n        }\r\n        this.load();\r\n    }\r\n\r\n    exportToViewField(field) {\r\n        \r\n        let obj = super.exportToViewField(field);\r\n        obj.val = computed({\r\n            get : () =>  {\r\n                if (field.type == \"checkbox\") return Boolean(this._data[field.name]);\r\n                else return this._data[field.name];\r\n            },\r\n            set : (val) => {\r\n                this._data[field.name] = val;\r\n                obj.validate();\r\n            }     \r\n        });\r\n        return obj;\r\n    }\r\n\r\n\r\n\r\n}","import Client from \"./../client.js\"\r\nimport { ModelState } from \"./modelstate.js\"\r\nimport { computed } from \"vue\"\r\n\r\nexport class ModelLogin extends ModelState {\r\n    constructor(model, parent_key, route) {\r\n        super(model, parent_key, route);\r\n        this._next_profile = \"public\";\r\n        this._next_id = 0;\r\n        this._component = \"gc-account-handler\";\r\n        this._globalerror = \"\";\r\n    }\r\n\r\n    getModelType() {\r\n        return \"login\";\r\n    }\r\n\r\n\r\n    get globalerror() {\r\n        return this._globalerror;\r\n    }\r\n\r\n    get next_profile() {\r\n        return this._next_profile;\r\n    }\r\n\r\n\r\n    load() {\r\n        if (this._custom.load) {\r\n            return this._custom.load(this);\r\n        }\r\n    }\r\n\r\n    submit() {\r\n        this._globalerror = \"\";\r\n        return Client.post(this._api_urls.login, this._data)\r\n        .then(request => {\r\n            if (request.__status == \"SUCCESS\") {\r\n                this._next_profile =  request.__profile;\r\n                this._next_id = request.__profile_id;\r\n            } else {\r\n                throw request;\r\n            }\r\n        })\r\n        .then(() => {\r\n            if (this._custom.submit) {\r\n                return this._custom.submit(this);\r\n            }\r\n        });\r\n    }\r\n\r\n    exportToViewField(field) {\r\n        let obj = super.exportToViewField(field);\r\n        obj.val = computed({\r\n                get : () =>  {\r\n                    if (field.type == \"checkbox\") return Boolean(this._data[field.name]);\r\n                    else return this._data[field.name];\r\n                },\r\n                set : (val) => {\r\n                    this._data[field.name] = val;\r\n                    obj.validate();\r\n                }     \r\n        });\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    \r\n\r\n}","import { ModelCreate } from \"./states/modelcreate.js\"\r\nimport { ModelUpdate } from \"./states/modelupdate.js\"\r\nimport { ModelGetPrimary } from \"./states/modelgetprimary.js\"\r\nimport { ModelGet } from \"./states/modelget.js\"\r\nimport { ModelLogin } from \"./states/modellogin.js\"\r\nimport { Field } from \"./field.js\"\r\nimport ctrlmapper from \"./ctrltoroutemapper.js\"\r\n\r\n\r\nexport class Model {\r\n    constructor(map, parent_value, route, options = {}) {\r\n        this._name = map.model;\r\n        this._label = route.label;\r\n        this._states = {};\r\n        this._active_state = null;\r\n        this._options = options;\r\n        this._primary_key = route.primarykey;\r\n        this._parent_key = route.parentkey;\r\n        this._children = route.children;\r\n        this._parent_value = parent_value;\r\n        this._key = 0;\r\n\r\n        this.buildlink = (state, key = 0) => {\r\n            return () => {\r\n                map.overwrite(this._name, state, key);\r\n                map.endChain();\r\n            }\r\n        }\r\n\r\n        for(let i in route.states) {\r\n            let cmodel = null;\r\n            let cfields = {};\r\n            if (i == \"get\" || i == \"getprimary\") {\r\n                for(let i in route.fields) {\r\n                    cfields[i] = new Field(i, route.fields[i]);\r\n                }\r\n            } else {\r\n                let fields = route.states[i].fields;\r\n                for (let i in fields) {\r\n                    cfields[fields[i]] = new Field(fields[i], route.fields[fields[i]]);\r\n                }\r\n            }\r\n            route.states[i].fields = cfields;\r\n            route.states[i].primarykey = this._primary_key;\r\n            route.states[i].parentkey = this._parent_key;\r\n            if (route.circular) route.states[i].circular = route.circular;\r\n\r\n            this.setActions(map, route.states);\r\n\r\n            if (this._options[i]) {\r\n                route.states[i].custom = this._options[i];\r\n            }\r\n\r\n            if (i == \"get\") cmodel = new ModelGet(this._name, this._parent_value, route.states[i]);\r\n            else if (i == \"getprimary\") cmodel = new ModelGetPrimary(this._name, this._parent_value, route.states[i]);\r\n            else if (i == \"post\") {\r\n                cmodel = new ModelCreate(this._name, this._parent_value, route.states[i]);\r\n                if (route.states.login) cmodel.component = \"gc-account-handler\";\r\n            } else if (i == \"put\") cmodel = new ModelUpdate(this._name, this._parent_value, route.states[i]);\r\n            else if (i == \"login\") cmodel = new ModelLogin(this._name, this._parent_value, route.states[i]);\r\n            this._states[i] = cmodel;\r\n\r\n            console.log(\"Building a state for \", i , cmodel);\r\n            console.log(\"Passed through custom options\", options);\r\n            if (this._options[i] && this._options[i].init) {\r\n                this._options[i].init(cmodel);\r\n            }\r\n        }\r\n        \r\n        this._active_state = map.state;\r\n        \r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get currentstate() {\r\n        return (this._active_state) ? this._states[this._active_state] : null;\r\n    }\r\n\r\n    get label() {\r\n        return this._label;\r\n    }\r\n    get action() {\r\n        return this._active_state;\r\n    }\r\n\r\n    get activestate() {\r\n        return (this._active_state && this._states[this._active_state]) ? this._states[this._active_state] :  null;\r\n    }\r\n\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n\r\n    load(map) {\r\n        if (map.prev) this.currentstate.parentkeyvalue = map.prev.key;\r\n        return this.currentstate.load(map.key);\r\n    }\r\n\r\n\r\n    setActions(map, states) {\r\n        if (states.get) this.createGetActions(map, states);\r\n        if (states.getprimary) this.createGetPrimaryActions(map, states);\r\n        if (states.post) this.createPostActions(map, states);\r\n        if (states.put) this.createPutActions(map, states);\r\n        if (states.login) this.createLoginActions(map, states);\r\n    }\r\n\r\n\r\n    createGetActions(map, states) {\r\n        let actions = {};\r\n        if (states.post) {\r\n            actions.post = { r : this.buildlink(\"post\", map.key), n : states.post.label };\r\n        }\r\n        /*\r\n        if (this._states.getprimary) {\r\n            actions.getprimary = { r : this.buildlink(\"getprimary\", params), n : this._states.getprimary.label };\r\n        } else {\r\n            if (this._states.put) {\r\n                actions.push({ r : this.buildlink(\"put\", params), n : this._states.put.label });\r\n            }\r\n            if (this._states.delete) {\r\n                actions.push({ r : this.buildlink(\"delete\", params), n : this._states.delete.label });\r\n            }\r\n        }\r\n        */\r\n        states.get.actions = actions;\r\n\r\n        states.get.next = (key) => {\r\n            if (states.getprimary) {\r\n                map.overwrite(this._name, \"getprimary\", key);\r\n                ctrlmapper.runRoute();\r\n            } else if (states.put) {\r\n                map.overwrite(this._name, \"put\", key);\r\n                ctrlmapper.runRoute();\r\n            }\r\n        } \r\n    }\r\n\r\n    createGetPrimaryActions(map, states) {\r\n        let actions = {};\r\n        if (states.put) {\r\n            actions.put = { r : this.buildlink(\"put\", map.key), n : states.put.label };\r\n        }\r\n        if (states.getprimary && states.getprimary.api_urls.delete) {\r\n            actions.delete = { r : this.buildlink(\"delete\", map.key), n : \"delete\" };\r\n        }\r\n        states.getprimary.actions = actions;\r\n    }\r\n\r\n    createPostActions(map, states) {\r\n        let actions = [];\r\n        if (states.login) {\r\n            actions.login = { r : this.buildlink(\"login\"), n : states.login.label };\r\n        }\r\n        states.post.actions = actions;\r\n\r\n        states.post.next = (key) =>  {\r\n            map.createTempURL(this._name, \"get\", key);\r\n        }\r\n    }\r\n\r\n    createPutActions(map, states) {\r\n        states.put.next = () => {\r\n            map.createTempURL(this._name, \"get\");\r\n        }\r\n    }\r\n\r\n    createLoginActions(map, states) {\r\n        let actions = [];\r\n        if (states.post) {\r\n            actions.post = { r : this.buildlink(\"post\"), n : states.post.label };\r\n        }\r\n        states.login.actions = actions;\r\n\r\n        states.login.next = instance => {\r\n           ctrlmapper.reloadFromBase(instance.next_profile);\r\n        }\r\n    }\r\n\r\n\r\n    exportToViewBlock() {\r\n        return {\r\n            actions\r\n        }\r\n    }\r\n\r\n    getCurrentState() {\r\n        if (this._active_state) {\r\n            return this._states[this._active_state];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    exportToStore() {\r\n        return this.currentstate;\r\n    }\r\n\r\n}","import client from \"./client.js\"\r\nimport { Model } from \"./model.js\"\r\nimport { reactive } from \"vue\"\r\n\r\nexport class ModelGroup {\r\n\r\n    constructor(model = null) {\r\n        this._parent = model;\r\n        this._model = null;\r\n        this._model_set = reactive({ set : [] });\r\n        this._options = {};\r\n        this._key = 0;\r\n        this._init = false;\r\n        this._is_active = false;\r\n    }\r\n\r\n    get model() {\r\n        return this._model;\r\n    }\r\n\r\n    get children() {\r\n        if (!this.model) return [];\r\n        else return this.model.children;\r\n    }\r\n\r\n    get key() {\r\n        return this._key;\r\n    }\r\n\r\n    get is_active() {\r\n        return this._is_active;\r\n    }\r\n\r\n    set key(key) {\r\n        this._key = key;\r\n    }\r\n\r\n    set is_active(active) {\r\n        this._is_active = active;\r\n    }\r\n\r\n    injectCustomSettings(settings) {\r\n        this._options = settings;\r\n    }\r\n\r\n\r\n    buildLink(map, model, state) {\r\n        return () => {\r\n            map.overwrite(model, state, this._model.currentstate.parentvalue);\r\n            map.endChain();\r\n        }\r\n    }\r\n\r\n    getDefaultState(states) {\r\n        if (states.get) return \"get\";\r\n        else if (states.getprimary) return \"getprimary\";\r\n        else if (states.login) return \"login\";\r\n        else if (states.put) return \"put\";\r\n        else if (states.post) return \"post\";\r\n    }\r\n\r\n\r\n\r\n    init(map) {\r\n        let parent_key = (map.prev) ? map.prev.key : 0;\r\n        this._model = null;\r\n        this._model_set.set = [];\r\n        this._init = true;\r\n        let url = \"/route-\";\r\n        url += (this._parent && this._parent != \"__default\") ? this._parent : \"default\";\r\n        return client.get(url)\r\n        .then(response => {\r\n            if (response.__status != \"SUCCESS\") {\r\n                throw new Error(response);\r\n            }\r\n\r\n            for(let i in response.routes) {\r\n                if ((!map.model && !this._model) || map.model == i) {\r\n                    map.model = i;\r\n                    if (!map.state) map.state = this.getDefaultState(response.routes[i].states);\r\n                    this._model = new Model(map, parent_key, response.routes[i], this._options[i]);\r\n                }\r\n\r\n                \r\n                this._model_set.set.push({\r\n                    n : response.routes[i].label,\r\n                    r : this.buildLink(map, i, this.getDefaultState(response.routes[i].states))\r\n                });\r\n            }\r\n            return response;\r\n        });\r\n    }\r\n\r\n  \r\n    getCurrentState() {\r\n        if (this._model) {\r\n            return this._model.getCurrentState();\r\n        } else {\r\n            return null;\r\n        } \r\n    }\r\n\r\n   \r\n    run(map) {\r\n        return this.init(map)\r\n        .then(() => {\r\n            return this._model.load(map);\r\n        });\r\n    }\r\n\r\n    exportToStore() {\r\n        return this._model_set;\r\n    }\r\n}","import { reactive } from \"vue\"\r\nimport { ModelGroup } from \"./modelgroup.js\"\r\nimport CtrlMapper from \"./ctrltoroutemapper.js\"\r\nimport Client from \"./client.js\"\r\n\r\n\r\n\r\nexport class Controller {\r\n\r\n    constructor(settings = {}) {\r\n        this._store = reactive({ 'groups' : [], profile : null });\r\n        this._model_settings = {};\r\n        this._route_interrupt = null;\r\n        this._map = null;\r\n        this._groups = [];\r\n        this._settings = settings;\r\n        this._profile;\r\n    }\r\n\r\n    get store() {\r\n        return this._store;\r\n    }\r\n\r\n    get groups() {\r\n        return this._groups;\r\n    }\r\n\r\n    set map(map) {\r\n        this._map = map;\r\n    }\r\n\r\n    get map() {\r\n        return this._map;\r\n    }\r\n\r\n    initProfile() {\r\n        return Client.get(\"/core-check-user\")\r\n        .then(response => {\r\n            this._profile = response.__profile;\r\n            this._store.profile = this._profile;\r\n            return this._profile;\r\n        });\r\n    }\r\n    assumeRole(role) {\r\n        return gc.Client.post('/core-assume-role', { 'role' : role })\r\n        .then(request => {\r\n            this._profile = request.__profile;\r\n            return request.__profile;\r\n        });\r\n    }\r\n\r\n    buildGroup(map) {\r\n        console.log(\"Building model group for\", map.group);\r\n        let group = new ModelGroup(map.group);\r\n        if (this._settings[this._profile]) {\r\n            console.log(\"Injecting Settings for \", this._profile);\r\n            group.injectCustomSettings(this._settings[this._profile]);\r\n        }\r\n        this._groups.push(group);\r\n        return group;\r\n    }\r\n\r\n    run() {\r\n        let map = this._map.maps;\r\n        if (!map) {\r\n            throw new Error(\"Error with controller run, no maps created\");\r\n        }\r\n        this._store.groups = [];\r\n        let promises = [];\r\n\r\n        let omap = map;\r\n\r\n        for(let i in this._groups) {\r\n            if (!omap || !omap.notchanged) {\r\n                this._groups.splice(i, this._groups.length - i);\r\n                break;\r\n            }\r\n            omap = omap.next;\r\n        }\r\n       \r\n\r\n        while(omap) {\r\n            const group = this.buildGroup(omap);\r\n            promises.push(group.run(omap));\r\n            omap=omap.next;\r\n        }\r\n\r\n        //check the last map to see if it needs a child group\r\n        //omap will be one before last\r\n\r\n        Promise.all(promises)\r\n        .then(() => {\r\n            const last_map = this._map.lastmap;\r\n            if (last_map.state == \"getprimary\") {\r\n                //need to add a new map\r\n                let group = this._groups[this._groups.length - 1];\r\n                group.is_active = true;\r\n                if (group.model.children.length > 0) {\r\n                    const map = this._map.createMap(last_map.model);\r\n                    map.key = last_map.key;\r\n                    const group = this.buildGroup(map);\r\n                    return group.run(map);\r\n                }\r\n            } else {\r\n                for(let group of this._groups) {\r\n                    group.is_active = false;\r\n                }\r\n                this._groups[this._groups.length - 1].is_active = true;\r\n            }\r\n        })\r\n        .then(() => {\r\n            for(let group of this._groups) {\r\n                this._store.groups.push({ siblings : group.exportToStore(), active : group.is_active, model : group.model.exportToStore() });\r\n            }\r\n        });       \r\n    }\r\n\r\n    runLink() {\r\n        CtrlMapper.runRoute();\r\n    }\r\n\r\n    /*\r\n    runRoutes() {\r\n     return client.get(\"/routes\")\r\n    .then(response => {\r\n        if (response.__status != \"SUCCESS\") {\r\n            throw new Error(response);\r\n        }\r\n        let actions = [];\r\n        for(let i in response.nav) {\r\n            let r = Router.convertToURL(response.nav[i].name, response.nav[i].state);\r\n            actions.push({\r\n                'n' : response.nav[i].label, \r\n                'r' : r});\r\n        }\r\n        this._store.top = {\"global\" : actions };\r\n        return response;\r\n    })\r\n    .then(response => {\r\n        if (this._route_interrupt) {\r\n            this._route_interrupt(response);\r\n        } \r\n        return response;\r\n    })\r\n    .then(response => {\r\n        const url = Router.currentURL();\r\n        if (!url || url[url.length - 1] == \"/\") {\r\n            for(let i in response.nav) {\r\n                if (response.nav[i].default) Router.setRoute(Router.convertToURL(response.nav[i].name, response.nav[i].state));\r\n            }\r\n        } else {\r\n            Router.runRoute();\r\n        }\r\n    });\r\n    }\r\n    */\r\n\r\n}","const action_map = {\r\n    'post' : '-create',\r\n    'put' : '-update',\r\n    'delete' : '-delete',\r\n    'login' : '-login',\r\n    'logout' : '-logout',\r\n    'getprimary' : '-primary',\r\n    'get' : ''\r\n};\r\n\r\nclass CtrlGroupMap {\r\n\r\n    constructor(group) {\r\n        this._group = group;\r\n        this._model;\r\n        this._state;\r\n        this._key = 0;\r\n        this._not_changed = false;\r\n        this._next;\r\n        this._prev;\r\n        this._overwrite = null;\r\n    }\r\n\r\n    set model(model) {\r\n        this._model = model;\r\n    }\r\n\r\n    set state(state) {\r\n        this._state = state;\r\n    }\r\n\r\n    set key(key) {\r\n        this._key = key;\r\n    }\r\n\r\n    set group(group) {\r\n        this._group = group;\r\n    }\r\n\r\n    set notchanged(not_changed) {\r\n        this._not_changed = not_changed;\r\n    }\r\n\r\n    set next(next) {\r\n        this._next = next;\r\n        next.prev = this;\r\n    }\r\n\r\n    set prev(prev) {\r\n        this._prev = prev;\r\n    }\r\n\r\n    get model() {\r\n        return this._model;\r\n    }\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n\r\n    get key() {\r\n        return this._key;\r\n    }\r\n\r\n    get group() {\r\n        return this._group;\r\n    }\r\n\r\n    get notchanged() {\r\n        return this._not_changed;\r\n    }\r\n\r\n    get next() {\r\n        return this._next;\r\n    }\r\n\r\n    get prev() {\r\n        return this._prev;\r\n    }\r\n\r\n\r\n    swap(map) {\r\n        this._group = map.group;\r\n        this._model = map.model;\r\n        this._state = map.state;\r\n        this._key = map.key;\r\n        this._next = map.next;\r\n        this._not_changed = false;\r\n    }\r\n\r\n    endChain() {\r\n        this._next = null;\r\n    }\r\n\r\n    overwrite(model, state, key) {\r\n        this._overwrite = {};\r\n        this._overwrite.model = model;\r\n        this._overwrite.state = state;\r\n        this._overwrite.key = key;\r\n    }\r\n\r\n    matches(map) {\r\n        let keys = [\"group\", \"model\", \"state\", \"key\"];\r\n        for(let v of keys) {\r\n            const oval = map[v];\r\n            const nval = this[v];\r\n            if (oval != nval) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    convertToURL() {\r\n        let model = this._model;\r\n        let state = this._state;\r\n        let key = this._key;\r\n        if (this._overwrite) {\r\n            model = this._overwrite.model;\r\n            state = this._overwrite.state;\r\n            key = this._overwrite.key;\r\n        }\r\n        let url = model + action_map[state];\r\n        if (key) url += \"-\" + key;\r\n        return url;\r\n    }\r\n\r\n    convertFromURL(url) {\r\n        let parts = url.split(\"-\");\r\n        if (parts.length == 0) return;\r\n        let key = parseInt(parts[parts.length - 1]);\r\n        if (isNaN(key)) this._key = 0;\r\n        else {\r\n            parts.pop();\r\n            this._key = key;\r\n        }\r\n        \r\n        if (parts.length == 0) {\r\n            throw new Error(\"Can't convert this url string: \" + url);\r\n        }\r\n        for(let i in action_map) {\r\n            if (action_map[i] == \"-\" + parts[parts.length - 1]) {\r\n                this._state = i\r\n                parts.pop();\r\n                break;\r\n            }\r\n        }\r\n        this._model = parts.join(\"-\");\r\n    }\r\n}\r\n\r\nexport class CtrlMap {\r\n\r\n    constructor(ctrl) {\r\n        this._root = null;\r\n        this._ctrl = ctrl;\r\n        this._trigger;\r\n    }\r\n\r\n    get ctrl() {\r\n        return this._ctrl;\r\n    }\r\n\r\n    get maps() {\r\n        return this._root;\r\n    }\r\n\r\n    get lastmap() {\r\n        if (!this._root) return null;\r\n        let map = this._root;\r\n        while(map.next) {\r\n            map = map.next;\r\n        }\r\n        return map;\r\n    }\r\n\r\n    append(map) {\r\n        const last = this.lastmap;\r\n        if (!last) this._root = map;\r\n        else last.next = map;\r\n    }\r\n\r\n    trigger(trig) {\r\n        this._trigger = trig;\r\n    }\r\n\r\n    createMap(group) {\r\n        let map = new CtrlGroupMap(group);\r\n        this.append(map);\r\n        return map;\r\n    }\r\n\r\n    convertToURL() {\r\n        let str_parts = [];\r\n        let map = this._root;\r\n        while(map) {\r\n            str_parts.push(map.convertToURL());\r\n            map = map.next;\r\n        }\r\n        return \"/\" + str_parts.join(\"/\");\r\n    }\r\n\r\n    convertFromURL(url) {\r\n        url = url.replace(/^\\/+|\\/+$/g, '');\r\n        let parts = url.split(\"/\");\r\n        let group = \"__default\";\r\n        let cmap = this._root;\r\n        for(let i in parts) {\r\n            let map = new CtrlGroupMap(group);\r\n            map.convertFromURL(parts[i]);\r\n            if (!cmap) {\r\n                this.append(map);\r\n            } else if (!cmap.matches(map)) {\r\n                cmap.swap(map);\r\n            } else {\r\n                cmap.notchanged = true;\r\n            }\r\n            group = map.model;\r\n            if (cmap) cmap = cmap.next;\r\n        }\r\n        console.log(this._root);\r\n        this._trigger();\r\n    }\r\n}","import { Controller } from \"./controller\";\r\nimport CtrlToRouteMapper from \"./ctrltoroutemapper.js\"\r\nimport { CtrlMap } from \"./ctrlmap.js\"\r\n\r\nlet csettings;\r\n\r\nfunction createController(settings = {}) {\r\n    let ctrl = new Controller(settings);\r\n    let map = new CtrlMap();\r\n    ctrl.map = map;\r\n    map.trigger(() => {\r\n        ctrl.run();\r\n    })\r\n    CtrlToRouteMapper.regCtrl(map);\r\n    return ctrl;\r\n}\r\n\r\nfunction regSettings(settings) {\r\n    csettings = settings;\r\n}\r\n\r\nexport default {\r\n    createController,\r\n    regSettings\r\n}","\r\nimport client from \"./client.js\"\r\nimport ctrlmapper from \"./ctrltoroutemapper.js\"\r\nimport ctrlfactory from \"./factorycontroller.js\"\r\n\r\nfunction injectSettings(settings) {\r\n    if (settings.client) {\r\n        client.setURL(settings.client.url);\r\n        if (settings.client.custom_headers) {\r\n            for(let i in settings.client.custom_headers) {\r\n                client.regCustomHeader(i, settings.client.custom_headers[i]);\r\n            }\r\n        }\r\n\r\n        if (settings.client.debug) {\r\n            client.regDebug(true);\r\n        }\r\n\r\n        client.regStatusHandler(403, function() {\r\n            alert(\"Page not found\");\r\n        });\r\n    } else {\r\n        throw new Error(\"You must set client settings\");\r\n    }\r\n\r\n    if (settings.mapper) {\r\n        if (settings.mapper.base) ctrlmapper.setBase(settings.mapper.base);\r\n    }\r\n\r\n    if (settings.models) {\r\n        ctrlfactory.regSettings(settings.models);\r\n    }\r\n}\r\n\r\nfunction getSettings(key) {\r\n    if (settings[key]) return settings[key];\r\n    else return {};\r\n}\r\n\r\nexport default {\r\n    injectSettings\r\n}\r\n","import GCRoot from \"./vite-sdk/src/components/gc-root.vue\"\r\nimport GCForm from \"./vite-sdk/src/components/gc-form.vue\"\r\nimport GCSingleItem from \"./vite-sdk/src/components/gc-single-item.vue\"\r\nimport GCTable from \"./vite-sdk/src/components/gc-table.vue\"\r\nimport GCTree from \"./vite-sdk/src/components/gc-tree.vue\"\r\nimport GCRepo from \"./vite-sdk/src/components/gc-repo.vue\"\r\nimport { Controller } from \"./vite-sdk/src/js/controller.js\"\r\nimport URLMapper from \"./vite-sdk/src/js/ctrltoroutemapper.js\"\r\nimport Router from \"./vite-sdk/src/js/router.js\"\r\nimport Client from \"./vite-sdk/src/js/client.js\"\r\nimport FactoryController from \"./vite-sdk/src/js/factorycontroller.js\"\r\nimport Settings from \"./vite-sdk/src/js/settingsinjection.js\"\r\n\r\n\r\n \r\nexport default { \r\n    GCRoot, Router, Controller, Client, URLMapper, FactoryController, Settings, GCForm, GCSingleItem, GCTable, GCTree, GCRepo }\r\n\r\n\r\n"],"names":["defineComponent","name","props","error","String","class","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","_createBlock","_hoisted_1","_ctx","field","Object","stores","setup","exportToViewField","components","gc-error","GCError","atts","label","_createVNode","onBlur","readonly","data","cval","computed","[object Object]","this","isvalidateon","val","watch","value","$emit","main_url","custom_headers","status_handlers","debug","regCustomHeader","regStatusHandler","status","handler","setURL","url","regDebug","is_debug","run","headers","mode","cache","credentials","fetch","then","response","ok","json","Error","statusText","omethod","method","catch","err","console","log","setDebug","get","params","URLSearchParams","graph","i","Array","isArray","append","JSON","stringify","indexOf","toString","getprimary","post","body","put","patch","delete","multiple","Boolean","$props","option","key","methods","getData","validate","updateField","set","setData","required","fields","field_name","e","target","files","length","onChange","total","Number","progress","num","Math","floor","isNaN","$options","error_invalid_map","getError","code","_dictionary","_templates","createEntry","category","entry","obj","options","regex","test","getEntry","setDictionary","dicts","setDictionaryTemplate","temp","RegExp","exportToView","dict","def","setEntry","store","fstate","globalerror","exportToViewBlock","Dictionary","model","action","clearErrors","submit","promises","promise","saveAsset","push","Promise","all","runNext","message","Errors","gc-input","GCInput","gc-confirm","GCConfirm","gc-select","GCSelect","gc-radio","GCRadio","gc-checkbox","GCCheckbox","gc-textarea","GCTextarea","gc-asset-field","GCAssetField","gc-progress-bar","GCProgressBar","onSubmit","classes","title","_createCommentVNode","actions","ctrl","inject","route","runLink","onClick","r","n","_hoisted_2","_hoisted_3","active","default","show","_renderSlot","GCFormSelect","gc-time-range","GCFilterFormTime","gc-filter-checkbox","GCFilterFormCheckbox","gc-widget","GCWidget","max_page_limit","groups","ceil","pages","current_group","max_options","maxoptions","index","Controller","current_route","query","firstindex","Router","setRoute","button","update","load","pos","selectedfields","splice","selectfields","checked","includes","gc-nav","GCNav","gc-filter-form","GCFilterForm","gc-pagination","GCPagination","gc-selectfields","GCSelectFields","branch","draggable","ischild","toggle_state","closest","setAttribute","next","sortable","arr","circular","activechildren","concat","id","primarykey","data-action","stop","onMousedown","onMouseup","_hoisted_4","cindex","$data","GCDragNDrop","constructor","_handle","handle","_drop_target","drop_target","_drag_target","drag_target","_call_back","callback","_x","_y","_offset_x","_offset_y","_judder","judder","_drag_node","_drop_node","_tree","tree","isJudder","x","y","dx","dy","getDirection","offset","elem","rect","getBoundingClientRect","win","ownerDocument","defaultView","top","pageYOffset","left","pageXOffset","insertAfter","drag_id","getAttribute","drop_id","sort","nextElementSibling","node","dragStart","ev","targ","dataTransfer","dropEffect","clientX","clientY","isDroppable","dragEnter","preventDefault","dir","dragOver","dragEnd","drop","initDD","drag","querySelectorAll","forEach","el","addAttribute","addEventListener","main","treeroot","base","onMounted","GCDragDrop","saveSort","gc-tree-node","GCTreeNode","cell","order","orderby","xval","yval","overlimit","rindex","_hoisted_6","gc-repo-header","GCRepoHeader","gc-tree","GCTree","gc-table","GCTable","rawcomponent","cb","runRoute","uri","window","location","pathname","onpopstate","history","pushState","hardSetRoute","regCallback","state","switchRoute","summary","runDelete","gc-breadcrumbs","GCBreadCrumbs","getModelType","login","gc-form","GCForm","clas","group","siblings","component","gc-single-item","GCSingleItem","gc-account-handler","GCAccountHandler","gc-repo","GCRepo","encodeParams","cstr","encodeURIComponent","keys","join","decodeParams","search","param_obj","graph_obj","parse","decodeURIComponent","mapParams","replace","route_base","ctrl_map","convertFromURL","exp","split","convertToURL","url_parts","map","param_str","Params","regCtrl","regParam","removeParam","setBase","reloadFromBase","Client","CtrlMapper","profile","gc-tabs","GCTabs","gc-account-details","GCAccountDetails","Validator","_min","_max","_has","_has_not","_errors","min","max","has","nhas","validateSize","MIN_VALUE","MAX_VALUE","OK","match","HAS_NOT","HAS","Field","_name","_type","_is_primary","_is_parent","_valid","_atts","_confirm","_readonly","_placeholder","_conditions","_link","_reference","_error","_label","_on","_summary","_default","_validator","validation","confirm","placeholder","conditions","link","on","calcValue","ModelState","parent_value","_model","_action","_api_urls","api_urls","_primary_key","_parent_key","parentkey","_parent_value","_key","_params","_fields","reactive","_data","_title","_component","_actions","_next","_custom","custom","c","charAt","_init","_states","apiurls","comp","_custom_actions","addParam","initFields","field_data","f","setValidateOn","showError","reference","parentvalue","__data","opt","Asset","_size","_blob","_uploaded","_chunk_size","_load_url","_save_url","chunk","blob","_url","getChunk","start","end","view","DataView","buffer","byteLength","getInt8","uploadAsset","chunk_end_cb","alert","loadFile","saveFile","file","size","resolve","reject","fr","FileReader","_self","onload","result","onerror","readAsArrayBuffer","chunks","chunk_size","__chunk","__blob","save_url","ModelCreate","parent_key","_status","kebab_name","save","asset","num_chunks","request","__status","super","ModelUpdate","_has_changes","load_url","msg","ModelGetPrimary","hasdelete","gets","str","_field","trim","ModelGet","_pages","_children","children","_circular","_sort","_search_data","_active_children","_order_by","_limit_fields","_page","_limit","_select_fields","_selected_fields","circ","limited_fields","limitedfields","rLoadObj","sortData","l","results","updateFields","values","args","ModelLogin","_next_profile","_next_id","_globalerror","__profile","__profile_id","Model","_active_state","_options","buildlink","overwrite","endChain","states","cmodel","cfields","setActions","init","prev","currentstate","parentkeyvalue","createGetActions","createGetPrimaryActions","createPostActions","createPutActions","createLoginActions","ctrlmapper","createTempURL","instance","next_profile","getCurrentState","exportToStore","ModelGroup","_parent","_model_set","_is_active","injectCustomSettings","settings","buildLink","getDefaultState","client","routes","_store","_model_settings","_route_interrupt","_map","_groups","_settings","_profile","initProfile","assumeRole","role","gc","buildGroup","maps","omap","notchanged","last_map","lastmap","is_active","createMap","action_map","CtrlGroupMap","_group","_state","_not_changed","_prev","_overwrite","not_changed","swap","matches","v","parts","parseInt","pop","CtrlMap","_root","_ctrl","_trigger","last","trigger","trig","str_parts","cmap","createController","CtrlToRouteMapper","regSettings","injectSettings","mapper","models","ctrlfactory","GCRoot","URLMapper","FactoryController","Settings"],"mappings":"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"}